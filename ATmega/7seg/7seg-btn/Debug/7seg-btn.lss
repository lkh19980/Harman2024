
7seg-btn.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000012  00800100  0000029c  00000310  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         0000029c  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .comment      00000030  00000000  00000000  00000322  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00000354  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000030  00000000  00000000  00000390  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   000009e9  00000000  00000000  000003c0  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 000008b4  00000000  00000000  00000da9  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   000003d2  00000000  00000000  0000165d  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000054  00000000  00000000  00001a30  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    00000433  00000000  00000000  00001a84  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    000001cb  00000000  00000000  00001eb7  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000020  00000000  00000000  00002082  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	45 c0       	rjmp	.+138    	; 0x8c <__ctors_end>
   2:	00 00       	nop
   4:	58 c0       	rjmp	.+176    	; 0xb6 <__bad_interrupt>
   6:	00 00       	nop
   8:	56 c0       	rjmp	.+172    	; 0xb6 <__bad_interrupt>
   a:	00 00       	nop
   c:	54 c0       	rjmp	.+168    	; 0xb6 <__bad_interrupt>
   e:	00 00       	nop
  10:	52 c0       	rjmp	.+164    	; 0xb6 <__bad_interrupt>
  12:	00 00       	nop
  14:	50 c0       	rjmp	.+160    	; 0xb6 <__bad_interrupt>
  16:	00 00       	nop
  18:	4e c0       	rjmp	.+156    	; 0xb6 <__bad_interrupt>
  1a:	00 00       	nop
  1c:	4c c0       	rjmp	.+152    	; 0xb6 <__bad_interrupt>
  1e:	00 00       	nop
  20:	4a c0       	rjmp	.+148    	; 0xb6 <__bad_interrupt>
  22:	00 00       	nop
  24:	48 c0       	rjmp	.+144    	; 0xb6 <__bad_interrupt>
  26:	00 00       	nop
  28:	46 c0       	rjmp	.+140    	; 0xb6 <__bad_interrupt>
  2a:	00 00       	nop
  2c:	44 c0       	rjmp	.+136    	; 0xb6 <__bad_interrupt>
  2e:	00 00       	nop
  30:	42 c0       	rjmp	.+132    	; 0xb6 <__bad_interrupt>
  32:	00 00       	nop
  34:	40 c0       	rjmp	.+128    	; 0xb6 <__bad_interrupt>
  36:	00 00       	nop
  38:	3e c0       	rjmp	.+124    	; 0xb6 <__bad_interrupt>
  3a:	00 00       	nop
  3c:	3c c0       	rjmp	.+120    	; 0xb6 <__bad_interrupt>
  3e:	00 00       	nop
  40:	3a c0       	rjmp	.+116    	; 0xb6 <__bad_interrupt>
  42:	00 00       	nop
  44:	38 c0       	rjmp	.+112    	; 0xb6 <__bad_interrupt>
  46:	00 00       	nop
  48:	36 c0       	rjmp	.+108    	; 0xb6 <__bad_interrupt>
  4a:	00 00       	nop
  4c:	34 c0       	rjmp	.+104    	; 0xb6 <__bad_interrupt>
  4e:	00 00       	nop
  50:	32 c0       	rjmp	.+100    	; 0xb6 <__bad_interrupt>
  52:	00 00       	nop
  54:	30 c0       	rjmp	.+96     	; 0xb6 <__bad_interrupt>
  56:	00 00       	nop
  58:	2e c0       	rjmp	.+92     	; 0xb6 <__bad_interrupt>
  5a:	00 00       	nop
  5c:	2c c0       	rjmp	.+88     	; 0xb6 <__bad_interrupt>
  5e:	00 00       	nop
  60:	2a c0       	rjmp	.+84     	; 0xb6 <__bad_interrupt>
  62:	00 00       	nop
  64:	28 c0       	rjmp	.+80     	; 0xb6 <__bad_interrupt>
  66:	00 00       	nop
  68:	26 c0       	rjmp	.+76     	; 0xb6 <__bad_interrupt>
  6a:	00 00       	nop
  6c:	24 c0       	rjmp	.+72     	; 0xb6 <__bad_interrupt>
  6e:	00 00       	nop
  70:	22 c0       	rjmp	.+68     	; 0xb6 <__bad_interrupt>
  72:	00 00       	nop
  74:	20 c0       	rjmp	.+64     	; 0xb6 <__bad_interrupt>
  76:	00 00       	nop
  78:	1e c0       	rjmp	.+60     	; 0xb6 <__bad_interrupt>
  7a:	00 00       	nop
  7c:	1c c0       	rjmp	.+56     	; 0xb6 <__bad_interrupt>
  7e:	00 00       	nop
  80:	1a c0       	rjmp	.+52     	; 0xb6 <__bad_interrupt>
  82:	00 00       	nop
  84:	18 c0       	rjmp	.+48     	; 0xb6 <__bad_interrupt>
  86:	00 00       	nop
  88:	16 c0       	rjmp	.+44     	; 0xb6 <__bad_interrupt>
	...

0000008c <__ctors_end>:
  8c:	11 24       	eor	r1, r1
  8e:	1f be       	out	0x3f, r1	; 63
  90:	cf ef       	ldi	r28, 0xFF	; 255
  92:	d0 e1       	ldi	r29, 0x10	; 16
  94:	de bf       	out	0x3e, r29	; 62
  96:	cd bf       	out	0x3d, r28	; 61

00000098 <__do_copy_data>:
  98:	11 e0       	ldi	r17, 0x01	; 1
  9a:	a0 e0       	ldi	r26, 0x00	; 0
  9c:	b1 e0       	ldi	r27, 0x01	; 1
  9e:	ec e9       	ldi	r30, 0x9C	; 156
  a0:	f2 e0       	ldi	r31, 0x02	; 2
  a2:	00 e0       	ldi	r16, 0x00	; 0
  a4:	0b bf       	out	0x3b, r16	; 59
  a6:	02 c0       	rjmp	.+4      	; 0xac <__do_copy_data+0x14>
  a8:	07 90       	elpm	r0, Z+
  aa:	0d 92       	st	X+, r0
  ac:	a2 31       	cpi	r26, 0x12	; 18
  ae:	b1 07       	cpc	r27, r17
  b0:	d9 f7       	brne	.-10     	; 0xa8 <__do_copy_data+0x10>
  b2:	32 d0       	rcall	.+100    	; 0x118 <main>
  b4:	f1 c0       	rjmp	.+482    	; 0x298 <_exit>

000000b6 <__bad_interrupt>:
  b6:	a4 cf       	rjmp	.-184    	; 0x0 <__vectors>

000000b8 <display>:
#include <util/delay.h>
uint8_t numbers[]
= {0x3f,0x06,0x5b,0x4f,0x66,0x6d,0x7d,0x27,0x7f,0x6f,0x77,0x7c,0x58,0x5e,0x79,0x71,0xc0,0x00};

void display(int *d)
{
  b8:	bc 01       	movw	r22, r24
	int i = 0;
	for(i = 0; i<4 ; i++)
  ba:	40 e0       	ldi	r20, 0x00	; 0
  bc:	50 e0       	ldi	r21, 0x00	; 0
  be:	23 c0       	rjmp	.+70     	; 0x106 <display+0x4e>
	{
		PORTE |= 0x0f;
  c0:	83 b1       	in	r24, 0x03	; 3
  c2:	8f 60       	ori	r24, 0x0F	; 15
  c4:	83 b9       	out	0x03, r24	; 3
		PORTE &= ~(1<<i);
  c6:	93 b1       	in	r25, 0x03	; 3
  c8:	21 e0       	ldi	r18, 0x01	; 1
  ca:	30 e0       	ldi	r19, 0x00	; 0
  cc:	04 2e       	mov	r0, r20
  ce:	02 c0       	rjmp	.+4      	; 0xd4 <display+0x1c>
  d0:	22 0f       	add	r18, r18
  d2:	33 1f       	adc	r19, r19
  d4:	0a 94       	dec	r0
  d6:	e2 f7       	brpl	.-8      	; 0xd0 <display+0x18>
  d8:	20 95       	com	r18
  da:	29 23       	and	r18, r25
  dc:	23 b9       	out	0x03, r18	; 3
		PORTD = numbers[d[i]];
  de:	fa 01       	movw	r30, r20
  e0:	ee 0f       	add	r30, r30
  e2:	ff 1f       	adc	r31, r31
  e4:	e6 0f       	add	r30, r22
  e6:	f7 1f       	adc	r31, r23
  e8:	01 90       	ld	r0, Z+
  ea:	f0 81       	ld	r31, Z
  ec:	e0 2d       	mov	r30, r0
  ee:	e0 50       	subi	r30, 0x00	; 0
  f0:	ff 4f       	sbci	r31, 0xFF	; 255
  f2:	80 81       	ld	r24, Z
  f4:	82 bb       	out	0x12, r24	; 18
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  f6:	8f e1       	ldi	r24, 0x1F	; 31
  f8:	9e e4       	ldi	r25, 0x4E	; 78
  fa:	01 97       	sbiw	r24, 0x01	; 1
  fc:	f1 f7       	brne	.-4      	; 0xfa <display+0x42>
  fe:	00 c0       	rjmp	.+0      	; 0x100 <display+0x48>
 100:	00 00       	nop
= {0x3f,0x06,0x5b,0x4f,0x66,0x6d,0x7d,0x27,0x7f,0x6f,0x77,0x7c,0x58,0x5e,0x79,0x71,0xc0,0x00};

void display(int *d)
{
	int i = 0;
	for(i = 0; i<4 ; i++)
 102:	4f 5f       	subi	r20, 0xFF	; 255
 104:	5f 4f       	sbci	r21, 0xFF	; 255
 106:	44 30       	cpi	r20, 0x04	; 4
 108:	51 05       	cpc	r21, r1
 10a:	d4 f2       	brlt	.-76     	; 0xc0 <display+0x8>
		PORTE |= 0x0f;
		PORTE &= ~(1<<i);
		PORTD = numbers[d[i]];
		_delay_ms(5);
	}
}
 10c:	08 95       	ret

0000010e <reset>:


void reset()
{
	int i = 0;
	PORTE = 0x00;
 10e:	13 b8       	out	0x03, r1	; 3
	//PORTE &= ~(1<<i);
	PORTD = numbers[16];
 110:	80 91 10 01 	lds	r24, 0x0110	; 0x800110 <__DATA_REGION_ORIGIN__+0x10>
 114:	82 bb       	out	0x12, r24	; 18
 116:	08 95       	ret

00000118 <main>:
}
//PORTE에 0이 출력 1이 출력 안함

int main(void)
{
 118:	cf 93       	push	r28
 11a:	df 93       	push	r29
 11c:	cd b7       	in	r28, 0x3d	; 61
 11e:	de b7       	in	r29, 0x3e	; 62
 120:	28 97       	sbiw	r28, 0x08	; 8
 122:	0f b6       	in	r0, 0x3f	; 63
 124:	f8 94       	cli
 126:	de bf       	out	0x3e, r29	; 62
 128:	0f be       	out	0x3f, r0	; 63
 12a:	cd bf       	out	0x3d, r28	; 61
	
	DDRD = 0xff;//세그먼트 제어 핀 8개를 출력으로 설정
 12c:	8f ef       	ldi	r24, 0xFF	; 255
 12e:	81 bb       	out	0x11, r24	; 17
	DDRE = 0x0f;//자릿수 전택 핀 4개를 출력으로 설정
 130:	8f e0       	ldi	r24, 0x0F	; 15
 132:	82 b9       	out	0x02, r24	; 2
	DDRB &= ~0x01;
 134:	87 b3       	in	r24, 0x17	; 23
 136:	8e 7f       	andi	r24, 0xFE	; 254
 138:	87 bb       	out	0x17, r24	; 23
    /* Replace with your application code */
	//PORTD -> *PORTD 포인터로 넘기기
	int i=0,j=0,count = 0;
	int start = 0;//0 stop 1 start 2 pause
	int d[4] = {0,0,0,0};
 13a:	fe 01       	movw	r30, r28
 13c:	31 96       	adiw	r30, 0x01	; 1
 13e:	88 e0       	ldi	r24, 0x08	; 8
 140:	df 01       	movw	r26, r30
 142:	1d 92       	st	X+, r1
 144:	8a 95       	dec	r24
 146:	e9 f7       	brne	.-6      	; 0x142 <main+0x2a>
	reset();
 148:	e2 df       	rcall	.-60     	; 0x10e <reset>
	DDRE = 0x0f;//자릿수 전택 핀 4개를 출력으로 설정
	DDRB &= ~0x01;
    /* Replace with your application code */
	//PORTD -> *PORTD 포인터로 넘기기
	int i=0,j=0,count = 0;
	int start = 0;//0 stop 1 start 2 pause
 14a:	e1 2c       	mov	r14, r1
 14c:	f1 2c       	mov	r15, r1
	DDRD = 0xff;//세그먼트 제어 핀 8개를 출력으로 설정
	DDRE = 0x0f;//자릿수 전택 핀 4개를 출력으로 설정
	DDRB &= ~0x01;
    /* Replace with your application code */
	//PORTD -> *PORTD 포인터로 넘기기
	int i=0,j=0,count = 0;
 14e:	00 e0       	ldi	r16, 0x00	; 0
 150:	10 e0       	ldi	r17, 0x00	; 0
 152:	02 c0       	rjmp	.+4      	; 0x158 <main+0x40>
			d[3]=3;
			*/
			display(d);
			//_delay_ms(200);
			count ++;
			if(count>=10000)count = 0;
 154:	00 e0       	ldi	r16, 0x00	; 0
 156:	10 e0       	ldi	r17, 0x00	; 0
	int d[4] = {0,0,0,0};
	reset();
    while (1) 
    {
		
		if(!(PINB & 1) )
 158:	b0 99       	sbic	0x16, 0	; 22
 15a:	23 c0       	rjmp	.+70     	; 0x1a2 <main+0x8a>
 15c:	bf ef       	ldi	r27, 0xFF	; 255
 15e:	23 ec       	ldi	r18, 0xC3	; 195
 160:	49 e0       	ldi	r20, 0x09	; 9
 162:	b1 50       	subi	r27, 0x01	; 1
 164:	20 40       	sbci	r18, 0x00	; 0
 166:	40 40       	sbci	r20, 0x00	; 0
 168:	e1 f7       	brne	.-8      	; 0x162 <main+0x4a>
 16a:	00 c0       	rjmp	.+0      	; 0x16c <main+0x54>
 16c:	00 00       	nop
		{
			_delay_ms(200);
			switch(start)
 16e:	81 e0       	ldi	r24, 0x01	; 1
 170:	e8 16       	cp	r14, r24
 172:	f1 04       	cpc	r15, r1
 174:	41 f0       	breq	.+16     	; 0x186 <main+0x6e>
 176:	92 e0       	ldi	r25, 0x02	; 2
 178:	e9 16       	cp	r14, r25
 17a:	f1 04       	cpc	r15, r1
 17c:	49 f0       	breq	.+18     	; 0x190 <main+0x78>
 17e:	e1 14       	cp	r14, r1
 180:	f1 04       	cpc	r15, r1
 182:	79 f4       	brne	.+30     	; 0x1a2 <main+0x8a>
 184:	0b c0       	rjmp	.+22     	; 0x19c <main+0x84>
			{
				case 0:
				start = 1;
				break;
				case 1:
				start = 2;
 186:	68 94       	set
 188:	ee 24       	eor	r14, r14
 18a:	e1 f8       	bld	r14, 1
 18c:	f1 2c       	mov	r15, r1
				break;
				case 2:
				reset();
 18e:	09 c0       	rjmp	.+18     	; 0x1a2 <main+0x8a>
 190:	be df       	rcall	.-132    	; 0x10e <reset>
				start = 0;
 192:	e1 2c       	mov	r14, r1
 194:	f1 2c       	mov	r15, r1
				count = 0;
 196:	00 e0       	ldi	r16, 0x00	; 0
 198:	10 e0       	ldi	r17, 0x00	; 0
				break;
 19a:	03 c0       	rjmp	.+6      	; 0x1a2 <main+0x8a>
		{
			_delay_ms(200);
			switch(start)
			{
				case 0:
				start = 1;
 19c:	ee 24       	eor	r14, r14
 19e:	e3 94       	inc	r14
 1a0:	f1 2c       	mov	r15, r1
			}
		}
		
		
		
		switch(start)
 1a2:	a1 e0       	ldi	r26, 0x01	; 1
 1a4:	ea 16       	cp	r14, r26
 1a6:	f1 04       	cpc	r15, r1
 1a8:	31 f0       	breq	.+12     	; 0x1b6 <main+0x9e>
 1aa:	b2 e0       	ldi	r27, 0x02	; 2
 1ac:	eb 16       	cp	r14, r27
 1ae:	f1 04       	cpc	r15, r1
 1b0:	09 f4       	brne	.+2      	; 0x1b4 <main+0x9c>
 1b2:	43 c0       	rjmp	.+134    	; 0x23a <main+0x122>
 1b4:	46 c0       	rjmp	.+140    	; 0x242 <main+0x12a>
			}
			PORTD = numbers[count++%16];
			*/
			
			///*	
			d[0] = count%10;
 1b6:	ea e0       	ldi	r30, 0x0A	; 10
 1b8:	f0 e0       	ldi	r31, 0x00	; 0
 1ba:	c8 01       	movw	r24, r16
 1bc:	bf 01       	movw	r22, r30
 1be:	45 d0       	rcall	.+138    	; 0x24a <__divmodhi4>
 1c0:	9a 83       	std	Y+2, r25	; 0x02
 1c2:	89 83       	std	Y+1, r24	; 0x01
			d[1] = (count%100)/10;
 1c4:	24 e6       	ldi	r18, 0x64	; 100
 1c6:	30 e0       	ldi	r19, 0x00	; 0
 1c8:	c8 01       	movw	r24, r16
 1ca:	b9 01       	movw	r22, r18
 1cc:	3e d0       	rcall	.+124    	; 0x24a <__divmodhi4>
 1ce:	bf 01       	movw	r22, r30
 1d0:	3c d0       	rcall	.+120    	; 0x24a <__divmodhi4>
 1d2:	7c 83       	std	Y+4, r23	; 0x04
 1d4:	6b 83       	std	Y+3, r22	; 0x03
			d[2] = (count%1000)/100;
 1d6:	c8 01       	movw	r24, r16
 1d8:	68 ee       	ldi	r22, 0xE8	; 232
 1da:	73 e0       	ldi	r23, 0x03	; 3
 1dc:	36 d0       	rcall	.+108    	; 0x24a <__divmodhi4>
 1de:	fb 01       	movw	r30, r22
 1e0:	b9 01       	movw	r22, r18
 1e2:	33 d0       	rcall	.+102    	; 0x24a <__divmodhi4>
 1e4:	7e 83       	std	Y+6, r23	; 0x06
 1e6:	6d 83       	std	Y+5, r22	; 0x05
 1e8:	f8 87       	std	Y+8, r31	; 0x08
			d[3] = count/1000;//count max 9999
 1ea:	ef 83       	std	Y+7, r30	; 0x07
 1ec:	98 01       	movw	r18, r16
			
			if(!(count/1000))
 1ee:	c8 01       	movw	r24, r16
 1f0:	89 51       	subi	r24, 0x19	; 25
 1f2:	9c 4f       	sbci	r25, 0xFC	; 252
 1f4:	8f 3c       	cpi	r24, 0xCF	; 207
 1f6:	97 40       	sbci	r25, 0x07	; 7
 1f8:	a8 f4       	brcc	.+42     	; 0x224 <main+0x10c>
 1fa:	81 e1       	ldi	r24, 0x11	; 17
			{
				d[3]=17;
 1fc:	90 e0       	ldi	r25, 0x00	; 0
 1fe:	98 87       	std	Y+8, r25	; 0x08
 200:	8f 83       	std	Y+7, r24	; 0x07
 202:	c8 01       	movw	r24, r16
				if(!(count/100))
 204:	8d 59       	subi	r24, 0x9D	; 157
 206:	9f 4f       	sbci	r25, 0xFF	; 255
 208:	87 3c       	cpi	r24, 0xC7	; 199
 20a:	91 05       	cpc	r25, r1
 20c:	58 f4       	brcc	.+22     	; 0x224 <main+0x10c>
 20e:	81 e1       	ldi	r24, 0x11	; 17
				{
					d[2]=17;
 210:	90 e0       	ldi	r25, 0x00	; 0
 212:	9e 83       	std	Y+6, r25	; 0x06
 214:	8d 83       	std	Y+5, r24	; 0x05
 216:	27 5f       	subi	r18, 0xF7	; 247
					if(!(count/10))d[1]=17;
 218:	3f 4f       	sbci	r19, 0xFF	; 255
 21a:	23 31       	cpi	r18, 0x13	; 19
 21c:	31 05       	cpc	r19, r1
 21e:	10 f4       	brcc	.+4      	; 0x224 <main+0x10c>
 220:	9c 83       	std	Y+4, r25	; 0x04
 222:	8b 83       	std	Y+3, r24	; 0x03
			d[0]=0;
			d[1]=1;
			d[2]=5;
			d[3]=3;
			*/
			display(d);
 224:	ce 01       	movw	r24, r28
 226:	01 96       	adiw	r24, 0x01	; 1
 228:	47 df       	rcall	.-370    	; 0xb8 <display>
 22a:	0f 5f       	subi	r16, 0xFF	; 255
			//_delay_ms(200);
			count ++;
 22c:	1f 4f       	sbci	r17, 0xFF	; 255
 22e:	00 31       	cpi	r16, 0x10	; 16
			if(count>=10000)count = 0;
 230:	87 e2       	ldi	r24, 0x27	; 39
 232:	18 07       	cpc	r17, r24
 234:	0c f0       	brlt	.+2      	; 0x238 <main+0x120>
 236:	8e cf       	rjmp	.-228    	; 0x154 <main+0x3c>
			break;
			
			case 2:
			display(d);
 238:	8f cf       	rjmp	.-226    	; 0x158 <main+0x40>
 23a:	ce 01       	movw	r24, r28
 23c:	01 96       	adiw	r24, 0x01	; 1
 23e:	3c df       	rcall	.-392    	; 0xb8 <display>
			break;
 240:	8b cf       	rjmp	.-234    	; 0x158 <main+0x40>
			
			default:
			start = 0;
			reset();
 242:	65 df       	rcall	.-310    	; 0x10e <reset>
 244:	e1 2c       	mov	r14, r1
			case 2:
			display(d);
			break;
			
			default:
			start = 0;
 246:	f1 2c       	mov	r15, r1
 248:	87 cf       	rjmp	.-242    	; 0x158 <main+0x40>

0000024a <__divmodhi4>:
			reset();
			break;
 24a:	97 fb       	bst	r25, 7
 24c:	07 2e       	mov	r0, r23
 24e:	16 f4       	brtc	.+4      	; 0x254 <__divmodhi4+0xa>
 250:	00 94       	com	r0
 252:	06 d0       	rcall	.+12     	; 0x260 <__divmodhi4_neg1>
 254:	77 fd       	sbrc	r23, 7
 256:	08 d0       	rcall	.+16     	; 0x268 <__divmodhi4_neg2>
 258:	0b d0       	rcall	.+22     	; 0x270 <__udivmodhi4>
 25a:	07 fc       	sbrc	r0, 7
 25c:	05 d0       	rcall	.+10     	; 0x268 <__divmodhi4_neg2>
 25e:	3e f4       	brtc	.+14     	; 0x26e <__divmodhi4_exit>

00000260 <__divmodhi4_neg1>:
 260:	90 95       	com	r25
 262:	81 95       	neg	r24
 264:	9f 4f       	sbci	r25, 0xFF	; 255
 266:	08 95       	ret

00000268 <__divmodhi4_neg2>:
 268:	70 95       	com	r23
 26a:	61 95       	neg	r22
 26c:	7f 4f       	sbci	r23, 0xFF	; 255

0000026e <__divmodhi4_exit>:
 26e:	08 95       	ret

00000270 <__udivmodhi4>:
 270:	aa 1b       	sub	r26, r26
 272:	bb 1b       	sub	r27, r27
 274:	51 e1       	ldi	r21, 0x11	; 17
 276:	07 c0       	rjmp	.+14     	; 0x286 <__udivmodhi4_ep>

00000278 <__udivmodhi4_loop>:
 278:	aa 1f       	adc	r26, r26
 27a:	bb 1f       	adc	r27, r27
 27c:	a6 17       	cp	r26, r22
 27e:	b7 07       	cpc	r27, r23
 280:	10 f0       	brcs	.+4      	; 0x286 <__udivmodhi4_ep>
 282:	a6 1b       	sub	r26, r22
 284:	b7 0b       	sbc	r27, r23

00000286 <__udivmodhi4_ep>:
 286:	88 1f       	adc	r24, r24
 288:	99 1f       	adc	r25, r25
 28a:	5a 95       	dec	r21
 28c:	a9 f7       	brne	.-22     	; 0x278 <__udivmodhi4_loop>
 28e:	80 95       	com	r24
 290:	90 95       	com	r25
 292:	bc 01       	movw	r22, r24
 294:	cd 01       	movw	r24, r26
 296:	08 95       	ret

00000298 <_exit>:
 298:	f8 94       	cli

0000029a <__stop_program>:
 29a:	ff cf       	rjmp	.-2      	; 0x29a <__stop_program>
