
test03-intr-timer.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000012  00800100  00000328  000003bc  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000328  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000009  00800112  00800112  000003ce  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  000003ce  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00000400  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000058  00000000  00000000  0000043c  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00000aaf  00000000  00000000  00000494  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 000008ed  00000000  00000000  00000f43  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   0000045f  00000000  00000000  00001830  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000000ec  00000000  00000000  00001c90  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    0000045f  00000000  00000000  00001d7c  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    0000033d  00000000  00000000  000021db  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000048  00000000  00000000  00002518  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	45 c0       	rjmp	.+138    	; 0x8c <__ctors_end>
   2:	00 00       	nop
   4:	60 c0       	rjmp	.+192    	; 0xc6 <__bad_interrupt>
   6:	00 00       	nop
   8:	5e c0       	rjmp	.+188    	; 0xc6 <__bad_interrupt>
   a:	00 00       	nop
   c:	5c c0       	rjmp	.+184    	; 0xc6 <__bad_interrupt>
   e:	00 00       	nop
  10:	5a c0       	rjmp	.+180    	; 0xc6 <__bad_interrupt>
  12:	00 00       	nop
  14:	22 c1       	rjmp	.+580    	; 0x25a <__vector_5>
  16:	00 00       	nop
  18:	4d c1       	rjmp	.+666    	; 0x2b4 <__vector_6>
  1a:	00 00       	nop
  1c:	75 c1       	rjmp	.+746    	; 0x308 <__vector_7>
  1e:	00 00       	nop
  20:	52 c0       	rjmp	.+164    	; 0xc6 <__bad_interrupt>
  22:	00 00       	nop
  24:	50 c0       	rjmp	.+160    	; 0xc6 <__bad_interrupt>
  26:	00 00       	nop
  28:	4e c0       	rjmp	.+156    	; 0xc6 <__bad_interrupt>
  2a:	00 00       	nop
  2c:	4c c0       	rjmp	.+152    	; 0xc6 <__bad_interrupt>
  2e:	00 00       	nop
  30:	4a c0       	rjmp	.+148    	; 0xc6 <__bad_interrupt>
  32:	00 00       	nop
  34:	48 c0       	rjmp	.+144    	; 0xc6 <__bad_interrupt>
  36:	00 00       	nop
  38:	46 c0       	rjmp	.+140    	; 0xc6 <__bad_interrupt>
  3a:	00 00       	nop
  3c:	44 c0       	rjmp	.+136    	; 0xc6 <__bad_interrupt>
  3e:	00 00       	nop
  40:	42 c0       	rjmp	.+132    	; 0xc6 <__bad_interrupt>
  42:	00 00       	nop
  44:	40 c0       	rjmp	.+128    	; 0xc6 <__bad_interrupt>
  46:	00 00       	nop
  48:	3e c0       	rjmp	.+124    	; 0xc6 <__bad_interrupt>
  4a:	00 00       	nop
  4c:	3c c0       	rjmp	.+120    	; 0xc6 <__bad_interrupt>
  4e:	00 00       	nop
  50:	3a c0       	rjmp	.+116    	; 0xc6 <__bad_interrupt>
  52:	00 00       	nop
  54:	38 c0       	rjmp	.+112    	; 0xc6 <__bad_interrupt>
  56:	00 00       	nop
  58:	36 c0       	rjmp	.+108    	; 0xc6 <__bad_interrupt>
  5a:	00 00       	nop
  5c:	34 c0       	rjmp	.+104    	; 0xc6 <__bad_interrupt>
  5e:	00 00       	nop
  60:	32 c0       	rjmp	.+100    	; 0xc6 <__bad_interrupt>
  62:	00 00       	nop
  64:	30 c0       	rjmp	.+96     	; 0xc6 <__bad_interrupt>
  66:	00 00       	nop
  68:	2e c0       	rjmp	.+92     	; 0xc6 <__bad_interrupt>
  6a:	00 00       	nop
  6c:	2c c0       	rjmp	.+88     	; 0xc6 <__bad_interrupt>
  6e:	00 00       	nop
  70:	2a c0       	rjmp	.+84     	; 0xc6 <__bad_interrupt>
  72:	00 00       	nop
  74:	28 c0       	rjmp	.+80     	; 0xc6 <__bad_interrupt>
  76:	00 00       	nop
  78:	26 c0       	rjmp	.+76     	; 0xc6 <__bad_interrupt>
  7a:	00 00       	nop
  7c:	24 c0       	rjmp	.+72     	; 0xc6 <__bad_interrupt>
  7e:	00 00       	nop
  80:	22 c0       	rjmp	.+68     	; 0xc6 <__bad_interrupt>
  82:	00 00       	nop
  84:	20 c0       	rjmp	.+64     	; 0xc6 <__bad_interrupt>
  86:	00 00       	nop
  88:	1e c0       	rjmp	.+60     	; 0xc6 <__bad_interrupt>
	...

0000008c <__ctors_end>:
  8c:	11 24       	eor	r1, r1
  8e:	1f be       	out	0x3f, r1	; 63
  90:	cf ef       	ldi	r28, 0xFF	; 255
  92:	d0 e1       	ldi	r29, 0x10	; 16
  94:	de bf       	out	0x3e, r29	; 62
  96:	cd bf       	out	0x3d, r28	; 61

00000098 <__do_copy_data>:
  98:	11 e0       	ldi	r17, 0x01	; 1
  9a:	a0 e0       	ldi	r26, 0x00	; 0
  9c:	b1 e0       	ldi	r27, 0x01	; 1
  9e:	e8 e2       	ldi	r30, 0x28	; 40
  a0:	f3 e0       	ldi	r31, 0x03	; 3
  a2:	00 e0       	ldi	r16, 0x00	; 0
  a4:	0b bf       	out	0x3b, r16	; 59
  a6:	02 c0       	rjmp	.+4      	; 0xac <__do_copy_data+0x14>
  a8:	07 90       	elpm	r0, Z+
  aa:	0d 92       	st	X+, r0
  ac:	a2 31       	cpi	r26, 0x12	; 18
  ae:	b1 07       	cpc	r27, r17
  b0:	d9 f7       	brne	.-10     	; 0xa8 <__do_copy_data+0x10>

000000b2 <__do_clear_bss>:
  b2:	21 e0       	ldi	r18, 0x01	; 1
  b4:	a2 e1       	ldi	r26, 0x12	; 18
  b6:	b1 e0       	ldi	r27, 0x01	; 1
  b8:	01 c0       	rjmp	.+2      	; 0xbc <.do_clear_bss_start>

000000ba <.do_clear_bss_loop>:
  ba:	1d 92       	st	X+, r1

000000bc <.do_clear_bss_start>:
  bc:	ab 31       	cpi	r26, 0x1B	; 27
  be:	b2 07       	cpc	r27, r18
  c0:	e1 f7       	brne	.-8      	; 0xba <.do_clear_bss_loop>
  c2:	94 d0       	rcall	.+296    	; 0x1ec <main>
  c4:	2f c1       	rjmp	.+606    	; 0x324 <_exit>

000000c6 <__bad_interrupt>:
  c6:	9c cf       	rjmp	.-200    	; 0x0 <__vectors>

000000c8 <seg>:
void reset()
{
	int i = 0;
	PORTE = 0x00;
	//PORTE &= ~(1<<i);
	PORTD = digit[16];
  c8:	93 b1       	in	r25, 0x03	; 3
  ca:	9f 60       	ori	r25, 0x0F	; 15
  cc:	93 b9       	out	0x03, r25	; 3
  ce:	93 b1       	in	r25, 0x03	; 3
  d0:	21 e0       	ldi	r18, 0x01	; 1
  d2:	30 e0       	ldi	r19, 0x00	; 0
  d4:	02 c0       	rjmp	.+4      	; 0xda <seg+0x12>
  d6:	22 0f       	add	r18, r18
  d8:	33 1f       	adc	r19, r19
  da:	8a 95       	dec	r24
  dc:	e2 f7       	brpl	.-8      	; 0xd6 <seg+0xe>
  de:	20 95       	com	r18
  e0:	29 23       	and	r18, r25
  e2:	23 b9       	out	0x03, r18	; 3
  e4:	62 bb       	out	0x12, r22	; 18
  e6:	8f e1       	ldi	r24, 0x1F	; 31
  e8:	9e e4       	ldi	r25, 0x4E	; 78
  ea:	01 97       	sbiw	r24, 0x01	; 1
  ec:	f1 f7       	brne	.-4      	; 0xea <seg+0x22>
  ee:	00 c0       	rjmp	.+0      	; 0xf0 <seg+0x28>
  f0:	00 00       	nop
  f2:	08 95       	ret

000000f4 <FND_4>:
  f4:	0f 93       	push	r16
  f6:	1f 93       	push	r17
  f8:	cf 93       	push	r28
  fa:	df 93       	push	r29
  fc:	8c 01       	movw	r16, r24
  fe:	c0 e0       	ldi	r28, 0x00	; 0
 100:	d0 e0       	ldi	r29, 0x00	; 0
 102:	07 c0       	rjmp	.+14     	; 0x112 <FND_4+0x1e>
 104:	f8 01       	movw	r30, r16
 106:	ec 0f       	add	r30, r28
 108:	fd 1f       	adc	r31, r29
 10a:	60 81       	ld	r22, Z
 10c:	ce 01       	movw	r24, r28
 10e:	dc df       	rcall	.-72     	; 0xc8 <seg>
 110:	21 96       	adiw	r28, 0x01	; 1
 112:	c4 30       	cpi	r28, 0x04	; 4
 114:	d1 05       	cpc	r29, r1
 116:	b4 f3       	brlt	.-20     	; 0x104 <FND_4+0x10>
 118:	df 91       	pop	r29
 11a:	cf 91       	pop	r28
 11c:	1f 91       	pop	r17
 11e:	0f 91       	pop	r16
 120:	08 95       	ret

00000122 <Disp>:
 122:	0f 93       	push	r16
 124:	1f 93       	push	r17
 126:	cf 93       	push	r28
 128:	db 01       	movw	r26, r22
 12a:	af 70       	andi	r26, 0x0F	; 15
 12c:	bb 27       	eor	r27, r27
 12e:	8b 01       	movw	r16, r22
 130:	9c 01       	movw	r18, r24
 132:	68 94       	set
 134:	13 f8       	bld	r1, 3
 136:	36 95       	lsr	r19
 138:	27 95       	ror	r18
 13a:	17 95       	ror	r17
 13c:	07 95       	ror	r16
 13e:	16 94       	lsr	r1
 140:	d1 f7       	brne	.-12     	; 0x136 <Disp+0x14>
 142:	f8 01       	movw	r30, r16
 144:	ef 70       	andi	r30, 0x0F	; 15
 146:	ff 27       	eor	r31, r31
 148:	07 2f       	mov	r16, r23
 14a:	18 2f       	mov	r17, r24
 14c:	29 2f       	mov	r18, r25
 14e:	33 27       	eor	r19, r19
 150:	a8 01       	movw	r20, r16
 152:	4f 70       	andi	r20, 0x0F	; 15
 154:	55 27       	eor	r21, r21
 156:	8b 01       	movw	r16, r22
 158:	9c 01       	movw	r18, r24
 15a:	0f 2e       	mov	r0, r31
 15c:	fc e0       	ldi	r31, 0x0C	; 12
 15e:	36 95       	lsr	r19
 160:	27 95       	ror	r18
 162:	17 95       	ror	r17
 164:	07 95       	ror	r16
 166:	fa 95       	dec	r31
 168:	d1 f7       	brne	.-12     	; 0x15e <Disp+0x3c>
 16a:	f0 2d       	mov	r31, r0
 16c:	98 01       	movw	r18, r16
 16e:	61 15       	cp	r22, r1
 170:	c0 e1       	ldi	r28, 0x10	; 16
 172:	7c 07       	cpc	r23, r28
 174:	81 05       	cpc	r24, r1
 176:	91 05       	cpc	r25, r1
 178:	c8 f4       	brcc	.+50     	; 0x1ac <Disp+0x8a>
 17a:	6f 3f       	cpi	r22, 0xFF	; 255
 17c:	71 05       	cpc	r23, r1
 17e:	81 05       	cpc	r24, r1
 180:	91 05       	cpc	r25, r1
 182:	09 f0       	breq	.+2      	; 0x186 <Disp+0x64>
 184:	50 f4       	brcc	.+20     	; 0x19a <Disp+0x78>
 186:	60 31       	cpi	r22, 0x10	; 16
 188:	71 05       	cpc	r23, r1
 18a:	81 05       	cpc	r24, r1
 18c:	91 05       	cpc	r25, r1
 18e:	40 f0       	brcs	.+16     	; 0x1a0 <Disp+0x7e>
 190:	21 e1       	ldi	r18, 0x11	; 17
 192:	30 e0       	ldi	r19, 0x00	; 0
 194:	41 e1       	ldi	r20, 0x11	; 17
 196:	50 e0       	ldi	r21, 0x00	; 0
 198:	09 c0       	rjmp	.+18     	; 0x1ac <Disp+0x8a>
 19a:	21 e1       	ldi	r18, 0x11	; 17
 19c:	30 e0       	ldi	r19, 0x00	; 0
 19e:	06 c0       	rjmp	.+12     	; 0x1ac <Disp+0x8a>
 1a0:	21 e1       	ldi	r18, 0x11	; 17
 1a2:	30 e0       	ldi	r19, 0x00	; 0
 1a4:	41 e1       	ldi	r20, 0x11	; 17
 1a6:	50 e0       	ldi	r21, 0x00	; 0
 1a8:	e1 e1       	ldi	r30, 0x11	; 17
 1aa:	f0 e0       	ldi	r31, 0x00	; 0
 1ac:	a0 50       	subi	r26, 0x00	; 0
 1ae:	bf 4f       	sbci	r27, 0xFF	; 255
 1b0:	8c 91       	ld	r24, X
 1b2:	a6 e1       	ldi	r26, 0x16	; 22
 1b4:	b1 e0       	ldi	r27, 0x01	; 1
 1b6:	8c 93       	st	X, r24
 1b8:	e0 50       	subi	r30, 0x00	; 0
 1ba:	ff 4f       	sbci	r31, 0xFF	; 255
 1bc:	80 81       	ld	r24, Z
 1be:	11 96       	adiw	r26, 0x01	; 1
 1c0:	8c 93       	st	X, r24
 1c2:	11 97       	sbiw	r26, 0x01	; 1
 1c4:	fa 01       	movw	r30, r20
 1c6:	e0 50       	subi	r30, 0x00	; 0
 1c8:	ff 4f       	sbci	r31, 0xFF	; 255
 1ca:	80 81       	ld	r24, Z
 1cc:	12 96       	adiw	r26, 0x02	; 2
 1ce:	8c 93       	st	X, r24
 1d0:	12 97       	sbiw	r26, 0x02	; 2
 1d2:	f9 01       	movw	r30, r18
 1d4:	e0 50       	subi	r30, 0x00	; 0
 1d6:	ff 4f       	sbci	r31, 0xFF	; 255
 1d8:	80 81       	ld	r24, Z
 1da:	13 96       	adiw	r26, 0x03	; 3
 1dc:	8c 93       	st	X, r24
 1de:	13 97       	sbiw	r26, 0x03	; 3
 1e0:	cd 01       	movw	r24, r26
 1e2:	88 df       	rcall	.-240    	; 0xf4 <FND_4>
 1e4:	cf 91       	pop	r28
 1e6:	1f 91       	pop	r17
 1e8:	0f 91       	pop	r16
 1ea:	08 95       	ret

000001ec <main>:
int main(void)
{
	
	// 7-Segment 사용 : 4 Module - C type
	// Pin assign : PDx - Segment img, PD0~3 - module select
	DDRD = 0xff;
 1ec:	8f ef       	ldi	r24, 0xFF	; 255
 1ee:	81 bb       	out	0x11, r24	; 17
	DDRE |= 0x0f;
 1f0:	82 b1       	in	r24, 0x02	; 2
 1f2:	8f 60       	ori	r24, 0x0F	; 15
 1f4:	82 b9       	out	0x02, r24	; 2
	// Interrupt 사용 : INT4 ~ INT6 (Ext Int)
	// Pin assign : PE4 ~ PE6
	// 인터럽트 설정
    EIMSK = 0x70;// 0111 0000b
 1f6:	80 e7       	ldi	r24, 0x70	; 112
 1f8:	89 bf       	out	0x39, r24	; 57
	EICRB = 0b00101010;
 1fa:	8a e2       	ldi	r24, 0x2A	; 42
 1fc:	8a bf       	out	0x3a, r24	; 58
	SREG |= 0x80;//status Register - 인터럽트 허용
 1fe:	8f b7       	in	r24, 0x3f	; 63
 200:	80 68       	ori	r24, 0x80	; 128
 202:	8f bf       	out	0x3f, r24	; 63
	sei();// set interrupt - 인터럽트 시작
 204:	78 94       	sei
	
	unsigned long t= 0;
 206:	c1 2c       	mov	r12, r1
 208:	d1 2c       	mov	r13, r1
 20a:	76 01       	movw	r14, r12
    while (1) 
    {
		//PORTD = digit[0];
		//PORTE &= 0xf0;
		
		switch(opmode)
 20c:	80 91 14 01 	lds	r24, 0x0114	; 0x800114 <opmode>
 210:	90 91 15 01 	lds	r25, 0x0115	; 0x800115 <opmode+0x1>
 214:	81 30       	cpi	r24, 0x01	; 1
 216:	91 05       	cpc	r25, r1
 218:	31 f0       	breq	.+12     	; 0x226 <main+0x3a>
 21a:	83 30       	cpi	r24, 0x03	; 3
 21c:	91 05       	cpc	r25, r1
 21e:	81 f0       	breq	.+32     	; 0x240 <main+0x54>
 220:	89 2b       	or	r24, r25
 222:	b9 f4       	brne	.+46     	; 0x252 <main+0x66>
 224:	13 c0       	rjmp	.+38     	; 0x24c <main+0x60>
		{
			case 0: // reset
				t=0; 
				break;
			case 1: // counter start
				t--;
 226:	81 e0       	ldi	r24, 0x01	; 1
 228:	c8 1a       	sub	r12, r24
 22a:	d1 08       	sbc	r13, r1
 22c:	e1 08       	sbc	r14, r1
 22e:	f1 08       	sbc	r15, r1
				if(t == 0) opmode=4;
 230:	81 f4       	brne	.+32     	; 0x252 <main+0x66>
 232:	84 e0       	ldi	r24, 0x04	; 4
 234:	90 e0       	ldi	r25, 0x00	; 0
 236:	90 93 15 01 	sts	0x0115, r25	; 0x800115 <opmode+0x1>
 23a:	80 93 14 01 	sts	0x0114, r24	; 0x800114 <opmode>
 23e:	09 c0       	rjmp	.+18     	; 0x252 <main+0x66>
				break;
			case 2: // count stop
				break;
			case 3:
				t++;
 240:	8f ef       	ldi	r24, 0xFF	; 255
 242:	c8 1a       	sub	r12, r24
 244:	d8 0a       	sbc	r13, r24
 246:	e8 0a       	sbc	r14, r24
 248:	f8 0a       	sbc	r15, r24
 24a:	03 c0       	rjmp	.+6      	; 0x252 <main+0x66>
		//PORTE &= 0xf0;
		
		switch(opmode)
		{
			case 0: // reset
				t=0; 
 24c:	c1 2c       	mov	r12, r1
 24e:	d1 2c       	mov	r13, r1
 250:	76 01       	movw	r14, r12
			break;
			default:
				break;
		}
		//Disp(65535);
		Disp(t);
 252:	c7 01       	movw	r24, r14
 254:	b6 01       	movw	r22, r12
 256:	65 df       	rcall	.-310    	; 0x122 <Disp>
		
		//Disp(t++);
		// LED방향, 
    }
 258:	d9 cf       	rjmp	.-78     	; 0x20c <main+0x20>

0000025a <__vector_5>:
}

ISR(INT4_vect)
{
 25a:	1f 92       	push	r1
 25c:	0f 92       	push	r0
 25e:	0f b6       	in	r0, 0x3f	; 63
 260:	0f 92       	push	r0
 262:	11 24       	eor	r1, r1
 264:	8f 93       	push	r24
 266:	9f 93       	push	r25
	opmode++;//
 268:	80 91 14 01 	lds	r24, 0x0114	; 0x800114 <opmode>
 26c:	90 91 15 01 	lds	r25, 0x0115	; 0x800115 <opmode+0x1>
 270:	01 96       	adiw	r24, 0x01	; 1
 272:	90 93 15 01 	sts	0x0115, r25	; 0x800115 <opmode+0x1>
 276:	80 93 14 01 	sts	0x0114, r24	; 0x800114 <opmode>
	if(opmode == 5)opmode =0;
 27a:	80 91 14 01 	lds	r24, 0x0114	; 0x800114 <opmode>
 27e:	90 91 15 01 	lds	r25, 0x0115	; 0x800115 <opmode+0x1>
 282:	05 97       	sbiw	r24, 0x05	; 5
 284:	21 f4       	brne	.+8      	; 0x28e <__vector_5+0x34>
 286:	10 92 15 01 	sts	0x0115, r1	; 0x800115 <opmode+0x1>
 28a:	10 92 14 01 	sts	0x0114, r1	; 0x800114 <opmode>
	if(opmode>=OPMODE_MAX)opmode = 1; //1,2
 28e:	80 91 14 01 	lds	r24, 0x0114	; 0x800114 <opmode>
 292:	90 91 15 01 	lds	r25, 0x0115	; 0x800115 <opmode+0x1>
 296:	03 97       	sbiw	r24, 0x03	; 3
 298:	34 f0       	brlt	.+12     	; 0x2a6 <__vector_5+0x4c>
 29a:	81 e0       	ldi	r24, 0x01	; 1
 29c:	90 e0       	ldi	r25, 0x00	; 0
 29e:	90 93 15 01 	sts	0x0115, r25	; 0x800115 <opmode+0x1>
 2a2:	80 93 14 01 	sts	0x0114, r24	; 0x800114 <opmode>
	
}
 2a6:	9f 91       	pop	r25
 2a8:	8f 91       	pop	r24
 2aa:	0f 90       	pop	r0
 2ac:	0f be       	out	0x3f, r0	; 63
 2ae:	0f 90       	pop	r0
 2b0:	1f 90       	pop	r1
 2b2:	18 95       	reti

000002b4 <__vector_6>:
ISR(INT5_vect)
{
 2b4:	1f 92       	push	r1
 2b6:	0f 92       	push	r0
 2b8:	0f b6       	in	r0, 0x3f	; 63
 2ba:	0f 92       	push	r0
 2bc:	11 24       	eor	r1, r1
 2be:	8f 93       	push	r24
 2c0:	9f 93       	push	r25
	//PORTD = digit[0];
	//PORTE = 0x0c0;
	state++;
 2c2:	80 91 12 01 	lds	r24, 0x0112	; 0x800112 <__data_end>
 2c6:	90 91 13 01 	lds	r25, 0x0113	; 0x800113 <__data_end+0x1>
 2ca:	01 96       	adiw	r24, 0x01	; 1
 2cc:	90 93 13 01 	sts	0x0113, r25	; 0x800113 <__data_end+0x1>
 2d0:	80 93 12 01 	sts	0x0112, r24	; 0x800112 <__data_end>
	if(state >= 2) state = 0;
 2d4:	80 91 12 01 	lds	r24, 0x0112	; 0x800112 <__data_end>
 2d8:	90 91 13 01 	lds	r25, 0x0113	; 0x800113 <__data_end+0x1>
 2dc:	02 97       	sbiw	r24, 0x02	; 2
 2de:	24 f0       	brlt	.+8      	; 0x2e8 <__vector_6+0x34>
 2e0:	10 92 13 01 	sts	0x0113, r1	; 0x800113 <__data_end+0x1>
 2e4:	10 92 12 01 	sts	0x0112, r1	; 0x800112 <__data_end>
	opmode = state+2;
 2e8:	80 91 12 01 	lds	r24, 0x0112	; 0x800112 <__data_end>
 2ec:	90 91 13 01 	lds	r25, 0x0113	; 0x800113 <__data_end+0x1>
 2f0:	02 96       	adiw	r24, 0x02	; 2
 2f2:	90 93 15 01 	sts	0x0115, r25	; 0x800115 <opmode+0x1>
 2f6:	80 93 14 01 	sts	0x0114, r24	; 0x800114 <opmode>
	//opmode++;//
	//if(opmode>=4)opmode = 2;
}
 2fa:	9f 91       	pop	r25
 2fc:	8f 91       	pop	r24
 2fe:	0f 90       	pop	r0
 300:	0f be       	out	0x3f, r0	; 63
 302:	0f 90       	pop	r0
 304:	1f 90       	pop	r1
 306:	18 95       	reti

00000308 <__vector_7>:
ISR(INT6_vect)
{
 308:	1f 92       	push	r1
 30a:	0f 92       	push	r0
 30c:	0f b6       	in	r0, 0x3f	; 63
 30e:	0f 92       	push	r0
 310:	11 24       	eor	r1, r1
	opmode = 0;
 312:	10 92 15 01 	sts	0x0115, r1	; 0x800115 <opmode+0x1>
 316:	10 92 14 01 	sts	0x0114, r1	; 0x800114 <opmode>
 31a:	0f 90       	pop	r0
 31c:	0f be       	out	0x3f, r0	; 63
 31e:	0f 90       	pop	r0
 320:	1f 90       	pop	r1
 322:	18 95       	reti

00000324 <_exit>:
 324:	f8 94       	cli

00000326 <__stop_program>:
 326:	ff cf       	rjmp	.-2      	; 0x326 <__stop_program>
