
test03-intr-timer.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000012  00800100  00000390  00000424  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000390  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000009  00800112  00800112  00000436  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00000436  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00000468  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000058  00000000  00000000  000004a4  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00000b93  00000000  00000000  000004fc  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 000008fe  00000000  00000000  0000108f  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   000004be  00000000  00000000  0000198d  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000000ec  00000000  00000000  00001e4c  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    0000045f  00000000  00000000  00001f38  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    0000045d  00000000  00000000  00002397  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000048  00000000  00000000  000027f4  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	45 c0       	rjmp	.+138    	; 0x8c <__ctors_end>
   2:	00 00       	nop
   4:	60 c0       	rjmp	.+192    	; 0xc6 <__bad_interrupt>
   6:	00 00       	nop
   8:	5e c0       	rjmp	.+188    	; 0xc6 <__bad_interrupt>
   a:	00 00       	nop
   c:	5c c0       	rjmp	.+184    	; 0xc6 <__bad_interrupt>
   e:	00 00       	nop
  10:	5a c0       	rjmp	.+180    	; 0xc6 <__bad_interrupt>
  12:	00 00       	nop
  14:	56 c1       	rjmp	.+684    	; 0x2c2 <__vector_5>
  16:	00 00       	nop
  18:	81 c1       	rjmp	.+770    	; 0x31c <__vector_6>
  1a:	00 00       	nop
  1c:	a9 c1       	rjmp	.+850    	; 0x370 <__vector_7>
  1e:	00 00       	nop
  20:	52 c0       	rjmp	.+164    	; 0xc6 <__bad_interrupt>
  22:	00 00       	nop
  24:	50 c0       	rjmp	.+160    	; 0xc6 <__bad_interrupt>
  26:	00 00       	nop
  28:	4e c0       	rjmp	.+156    	; 0xc6 <__bad_interrupt>
  2a:	00 00       	nop
  2c:	4c c0       	rjmp	.+152    	; 0xc6 <__bad_interrupt>
  2e:	00 00       	nop
  30:	4a c0       	rjmp	.+148    	; 0xc6 <__bad_interrupt>
  32:	00 00       	nop
  34:	48 c0       	rjmp	.+144    	; 0xc6 <__bad_interrupt>
  36:	00 00       	nop
  38:	46 c0       	rjmp	.+140    	; 0xc6 <__bad_interrupt>
  3a:	00 00       	nop
  3c:	44 c0       	rjmp	.+136    	; 0xc6 <__bad_interrupt>
  3e:	00 00       	nop
  40:	42 c0       	rjmp	.+132    	; 0xc6 <__bad_interrupt>
  42:	00 00       	nop
  44:	40 c0       	rjmp	.+128    	; 0xc6 <__bad_interrupt>
  46:	00 00       	nop
  48:	3e c0       	rjmp	.+124    	; 0xc6 <__bad_interrupt>
  4a:	00 00       	nop
  4c:	3c c0       	rjmp	.+120    	; 0xc6 <__bad_interrupt>
  4e:	00 00       	nop
  50:	3a c0       	rjmp	.+116    	; 0xc6 <__bad_interrupt>
  52:	00 00       	nop
  54:	38 c0       	rjmp	.+112    	; 0xc6 <__bad_interrupt>
  56:	00 00       	nop
  58:	36 c0       	rjmp	.+108    	; 0xc6 <__bad_interrupt>
  5a:	00 00       	nop
  5c:	34 c0       	rjmp	.+104    	; 0xc6 <__bad_interrupt>
  5e:	00 00       	nop
  60:	32 c0       	rjmp	.+100    	; 0xc6 <__bad_interrupt>
  62:	00 00       	nop
  64:	30 c0       	rjmp	.+96     	; 0xc6 <__bad_interrupt>
  66:	00 00       	nop
  68:	2e c0       	rjmp	.+92     	; 0xc6 <__bad_interrupt>
  6a:	00 00       	nop
  6c:	2c c0       	rjmp	.+88     	; 0xc6 <__bad_interrupt>
  6e:	00 00       	nop
  70:	2a c0       	rjmp	.+84     	; 0xc6 <__bad_interrupt>
  72:	00 00       	nop
  74:	28 c0       	rjmp	.+80     	; 0xc6 <__bad_interrupt>
  76:	00 00       	nop
  78:	26 c0       	rjmp	.+76     	; 0xc6 <__bad_interrupt>
  7a:	00 00       	nop
  7c:	24 c0       	rjmp	.+72     	; 0xc6 <__bad_interrupt>
  7e:	00 00       	nop
  80:	22 c0       	rjmp	.+68     	; 0xc6 <__bad_interrupt>
  82:	00 00       	nop
  84:	20 c0       	rjmp	.+64     	; 0xc6 <__bad_interrupt>
  86:	00 00       	nop
  88:	1e c0       	rjmp	.+60     	; 0xc6 <__bad_interrupt>
	...

0000008c <__ctors_end>:
  8c:	11 24       	eor	r1, r1
  8e:	1f be       	out	0x3f, r1	; 63
  90:	cf ef       	ldi	r28, 0xFF	; 255
  92:	d0 e1       	ldi	r29, 0x10	; 16
  94:	de bf       	out	0x3e, r29	; 62
  96:	cd bf       	out	0x3d, r28	; 61

00000098 <__do_copy_data>:
  98:	11 e0       	ldi	r17, 0x01	; 1
  9a:	a0 e0       	ldi	r26, 0x00	; 0
  9c:	b1 e0       	ldi	r27, 0x01	; 1
  9e:	e0 e9       	ldi	r30, 0x90	; 144
  a0:	f3 e0       	ldi	r31, 0x03	; 3
  a2:	00 e0       	ldi	r16, 0x00	; 0
  a4:	0b bf       	out	0x3b, r16	; 59
  a6:	02 c0       	rjmp	.+4      	; 0xac <__do_copy_data+0x14>
  a8:	07 90       	elpm	r0, Z+
  aa:	0d 92       	st	X+, r0
  ac:	a2 31       	cpi	r26, 0x12	; 18
  ae:	b1 07       	cpc	r27, r17
  b0:	d9 f7       	brne	.-10     	; 0xa8 <__do_copy_data+0x10>

000000b2 <__do_clear_bss>:
  b2:	21 e0       	ldi	r18, 0x01	; 1
  b4:	a2 e1       	ldi	r26, 0x12	; 18
  b6:	b1 e0       	ldi	r27, 0x01	; 1
  b8:	01 c0       	rjmp	.+2      	; 0xbc <.do_clear_bss_start>

000000ba <.do_clear_bss_loop>:
  ba:	1d 92       	st	X+, r1

000000bc <.do_clear_bss_start>:
  bc:	ab 31       	cpi	r26, 0x1B	; 27
  be:	b2 07       	cpc	r27, r18
  c0:	e1 f7       	brne	.-8      	; 0xba <.do_clear_bss_loop>
  c2:	94 d0       	rcall	.+296    	; 0x1ec <main>
  c4:	63 c1       	rjmp	.+710    	; 0x38c <_exit>

000000c6 <__bad_interrupt>:
  c6:	9c cf       	rjmp	.-200    	; 0x0 <__vectors>

000000c8 <seg>:
void reset()
{
	int i = 0;
	PORTE = 0x00;
	//PORTE &= ~(1<<i);
	PORTD = digit[16];
  c8:	93 b1       	in	r25, 0x03	; 3
  ca:	9f 60       	ori	r25, 0x0F	; 15
  cc:	93 b9       	out	0x03, r25	; 3
  ce:	93 b1       	in	r25, 0x03	; 3
  d0:	21 e0       	ldi	r18, 0x01	; 1
  d2:	30 e0       	ldi	r19, 0x00	; 0
  d4:	02 c0       	rjmp	.+4      	; 0xda <seg+0x12>
  d6:	22 0f       	add	r18, r18
  d8:	33 1f       	adc	r19, r19
  da:	8a 95       	dec	r24
  dc:	e2 f7       	brpl	.-8      	; 0xd6 <seg+0xe>
  de:	20 95       	com	r18
  e0:	29 23       	and	r18, r25
  e2:	23 b9       	out	0x03, r18	; 3
  e4:	62 bb       	out	0x12, r22	; 18
  e6:	8f e1       	ldi	r24, 0x1F	; 31
  e8:	9e e4       	ldi	r25, 0x4E	; 78
  ea:	01 97       	sbiw	r24, 0x01	; 1
  ec:	f1 f7       	brne	.-4      	; 0xea <seg+0x22>
  ee:	00 c0       	rjmp	.+0      	; 0xf0 <seg+0x28>
  f0:	00 00       	nop
  f2:	08 95       	ret

000000f4 <FND_4>:
  f4:	0f 93       	push	r16
  f6:	1f 93       	push	r17
  f8:	cf 93       	push	r28
  fa:	df 93       	push	r29
  fc:	8c 01       	movw	r16, r24
  fe:	c0 e0       	ldi	r28, 0x00	; 0
 100:	d0 e0       	ldi	r29, 0x00	; 0
 102:	07 c0       	rjmp	.+14     	; 0x112 <FND_4+0x1e>
 104:	f8 01       	movw	r30, r16
 106:	ec 0f       	add	r30, r28
 108:	fd 1f       	adc	r31, r29
 10a:	60 81       	ld	r22, Z
 10c:	ce 01       	movw	r24, r28
 10e:	dc df       	rcall	.-72     	; 0xc8 <seg>
 110:	21 96       	adiw	r28, 0x01	; 1
 112:	c4 30       	cpi	r28, 0x04	; 4
 114:	d1 05       	cpc	r29, r1
 116:	b4 f3       	brlt	.-20     	; 0x104 <FND_4+0x10>
 118:	df 91       	pop	r29
 11a:	cf 91       	pop	r28
 11c:	1f 91       	pop	r17
 11e:	0f 91       	pop	r16
 120:	08 95       	ret

00000122 <Disp>:
 122:	0f 93       	push	r16
 124:	1f 93       	push	r17
 126:	cf 93       	push	r28
 128:	db 01       	movw	r26, r22
 12a:	af 70       	andi	r26, 0x0F	; 15
 12c:	bb 27       	eor	r27, r27
 12e:	8b 01       	movw	r16, r22
 130:	9c 01       	movw	r18, r24
 132:	68 94       	set
 134:	13 f8       	bld	r1, 3
 136:	36 95       	lsr	r19
 138:	27 95       	ror	r18
 13a:	17 95       	ror	r17
 13c:	07 95       	ror	r16
 13e:	16 94       	lsr	r1
 140:	d1 f7       	brne	.-12     	; 0x136 <Disp+0x14>
 142:	f8 01       	movw	r30, r16
 144:	ef 70       	andi	r30, 0x0F	; 15
 146:	ff 27       	eor	r31, r31
 148:	07 2f       	mov	r16, r23
 14a:	18 2f       	mov	r17, r24
 14c:	29 2f       	mov	r18, r25
 14e:	33 27       	eor	r19, r19
 150:	a8 01       	movw	r20, r16
 152:	4f 70       	andi	r20, 0x0F	; 15
 154:	55 27       	eor	r21, r21
 156:	8b 01       	movw	r16, r22
 158:	9c 01       	movw	r18, r24
 15a:	0f 2e       	mov	r0, r31
 15c:	fc e0       	ldi	r31, 0x0C	; 12
 15e:	36 95       	lsr	r19
 160:	27 95       	ror	r18
 162:	17 95       	ror	r17
 164:	07 95       	ror	r16
 166:	fa 95       	dec	r31
 168:	d1 f7       	brne	.-12     	; 0x15e <Disp+0x3c>
 16a:	f0 2d       	mov	r31, r0
 16c:	98 01       	movw	r18, r16
 16e:	61 15       	cp	r22, r1
 170:	c0 e1       	ldi	r28, 0x10	; 16
 172:	7c 07       	cpc	r23, r28
 174:	81 05       	cpc	r24, r1
 176:	91 05       	cpc	r25, r1
 178:	c8 f4       	brcc	.+50     	; 0x1ac <Disp+0x8a>
 17a:	6f 3f       	cpi	r22, 0xFF	; 255
 17c:	71 05       	cpc	r23, r1
 17e:	81 05       	cpc	r24, r1
 180:	91 05       	cpc	r25, r1
 182:	09 f0       	breq	.+2      	; 0x186 <Disp+0x64>
 184:	50 f4       	brcc	.+20     	; 0x19a <Disp+0x78>
 186:	60 31       	cpi	r22, 0x10	; 16
 188:	71 05       	cpc	r23, r1
 18a:	81 05       	cpc	r24, r1
 18c:	91 05       	cpc	r25, r1
 18e:	40 f0       	brcs	.+16     	; 0x1a0 <Disp+0x7e>
 190:	21 e1       	ldi	r18, 0x11	; 17
 192:	30 e0       	ldi	r19, 0x00	; 0
 194:	41 e1       	ldi	r20, 0x11	; 17
 196:	50 e0       	ldi	r21, 0x00	; 0
 198:	09 c0       	rjmp	.+18     	; 0x1ac <Disp+0x8a>
 19a:	21 e1       	ldi	r18, 0x11	; 17
 19c:	30 e0       	ldi	r19, 0x00	; 0
 19e:	06 c0       	rjmp	.+12     	; 0x1ac <Disp+0x8a>
 1a0:	21 e1       	ldi	r18, 0x11	; 17
 1a2:	30 e0       	ldi	r19, 0x00	; 0
 1a4:	41 e1       	ldi	r20, 0x11	; 17
 1a6:	50 e0       	ldi	r21, 0x00	; 0
 1a8:	e1 e1       	ldi	r30, 0x11	; 17
 1aa:	f0 e0       	ldi	r31, 0x00	; 0
 1ac:	a0 50       	subi	r26, 0x00	; 0
 1ae:	bf 4f       	sbci	r27, 0xFF	; 255
 1b0:	8c 91       	ld	r24, X
 1b2:	a6 e1       	ldi	r26, 0x16	; 22
 1b4:	b1 e0       	ldi	r27, 0x01	; 1
 1b6:	8c 93       	st	X, r24
 1b8:	e0 50       	subi	r30, 0x00	; 0
 1ba:	ff 4f       	sbci	r31, 0xFF	; 255
 1bc:	80 81       	ld	r24, Z
 1be:	11 96       	adiw	r26, 0x01	; 1
 1c0:	8c 93       	st	X, r24
 1c2:	11 97       	sbiw	r26, 0x01	; 1
 1c4:	fa 01       	movw	r30, r20
 1c6:	e0 50       	subi	r30, 0x00	; 0
 1c8:	ff 4f       	sbci	r31, 0xFF	; 255
 1ca:	80 81       	ld	r24, Z
 1cc:	12 96       	adiw	r26, 0x02	; 2
 1ce:	8c 93       	st	X, r24
 1d0:	12 97       	sbiw	r26, 0x02	; 2
 1d2:	f9 01       	movw	r30, r18
 1d4:	e0 50       	subi	r30, 0x00	; 0
 1d6:	ff 4f       	sbci	r31, 0xFF	; 255
 1d8:	80 81       	ld	r24, Z
 1da:	13 96       	adiw	r26, 0x03	; 3
 1dc:	8c 93       	st	X, r24
 1de:	13 97       	sbiw	r26, 0x03	; 3
 1e0:	cd 01       	movw	r24, r26
 1e2:	88 df       	rcall	.-240    	; 0xf4 <FND_4>
 1e4:	cf 91       	pop	r28
 1e6:	1f 91       	pop	r17
 1e8:	0f 91       	pop	r16
 1ea:	08 95       	ret

000001ec <main>:
int main(void)
{
	
	// 7-Segment 사용 : 4 Module - C type
	// Pin assign : PDx - Segment img, PD0~3 - module select
	DDRD = 0xff;
 1ec:	8f ef       	ldi	r24, 0xFF	; 255
 1ee:	81 bb       	out	0x11, r24	; 17
	DDRE |= 0x0f;
 1f0:	82 b1       	in	r24, 0x02	; 2
 1f2:	8f 60       	ori	r24, 0x0F	; 15
 1f4:	82 b9       	out	0x02, r24	; 2
	DDRA |= 0x0f;
 1f6:	8a b3       	in	r24, 0x1a	; 26
 1f8:	8f 60       	ori	r24, 0x0F	; 15
 1fa:	8a bb       	out	0x1a, r24	; 26
	// Interrupt 사용 : INT4 ~ INT6 (Ext Int)
	// Pin assign : PE4 ~ PE6
	// 인터럽트 설정
    EIMSK = 0x70;// 0111 0000b
 1fc:	80 e7       	ldi	r24, 0x70	; 112
 1fe:	89 bf       	out	0x39, r24	; 57
	EICRB = 0b00101010;
 200:	8a e2       	ldi	r24, 0x2A	; 42
 202:	8a bf       	out	0x3a, r24	; 58
	SREG |= 0x80;//status Register - 인터럽트 허용
 204:	8f b7       	in	r24, 0x3f	; 63
 206:	80 68       	ori	r24, 0x80	; 128
 208:	8f bf       	out	0x3f, r24	; 63
	sei();// set interrupt - 인터럽트 시작
 20a:	78 94       	sei
	
	unsigned long t= 0;
 20c:	c1 2c       	mov	r12, r1
 20e:	d1 2c       	mov	r13, r1
 210:	76 01       	movw	r14, r12
    while (1) 
    {
		//PORTD = digit[0];
		//PORTE &= 0xf0;
		
		switch(opmode)
 212:	80 91 14 01 	lds	r24, 0x0114	; 0x800114 <opmode>
 216:	90 91 15 01 	lds	r25, 0x0115	; 0x800115 <opmode+0x1>
 21a:	81 30       	cpi	r24, 0x01	; 1
 21c:	91 05       	cpc	r25, r1
 21e:	59 f0       	breq	.+22     	; 0x236 <main+0x4a>
 220:	24 f4       	brge	.+8      	; 0x22a <main+0x3e>
 222:	89 2b       	or	r24, r25
 224:	09 f4       	brne	.+2      	; 0x228 <main+0x3c>
 226:	46 c0       	rjmp	.+140    	; 0x2b4 <main+0xc8>
 228:	48 c0       	rjmp	.+144    	; 0x2ba <main+0xce>
 22a:	83 30       	cpi	r24, 0x03	; 3
 22c:	91 05       	cpc	r25, r1
 22e:	f1 f0       	breq	.+60     	; 0x26c <main+0x80>
 230:	04 97       	sbiw	r24, 0x04	; 4
 232:	11 f1       	breq	.+68     	; 0x278 <main+0x8c>
 234:	42 c0       	rjmp	.+132    	; 0x2ba <main+0xce>
			case 0: // reset
				t=0; 
				break;
			case 1: // counter start
				
				t--;
 236:	81 e0       	ldi	r24, 0x01	; 1
 238:	c8 1a       	sub	r12, r24
 23a:	d1 08       	sbc	r13, r1
 23c:	e1 08       	sbc	r14, r1
 23e:	f1 08       	sbc	r15, r1
				if (t==-1) opmode = 0;
 240:	9f ef       	ldi	r25, 0xFF	; 255
 242:	c9 16       	cp	r12, r25
 244:	d9 06       	cpc	r13, r25
 246:	e9 06       	cpc	r14, r25
 248:	f9 06       	cpc	r15, r25
 24a:	21 f4       	brne	.+8      	; 0x254 <main+0x68>
 24c:	10 92 15 01 	sts	0x0115, r1	; 0x800115 <opmode+0x1>
 250:	10 92 14 01 	sts	0x0114, r1	; 0x800114 <opmode>
				if(t == 0) opmode=4;
 254:	c1 14       	cp	r12, r1
 256:	d1 04       	cpc	r13, r1
 258:	e1 04       	cpc	r14, r1
 25a:	f1 04       	cpc	r15, r1
 25c:	71 f5       	brne	.+92     	; 0x2ba <main+0xce>
 25e:	84 e0       	ldi	r24, 0x04	; 4
 260:	90 e0       	ldi	r25, 0x00	; 0
 262:	90 93 15 01 	sts	0x0115, r25	; 0x800115 <opmode+0x1>
 266:	80 93 14 01 	sts	0x0114, r24	; 0x800114 <opmode>
 26a:	27 c0       	rjmp	.+78     	; 0x2ba <main+0xce>
				break;
			case 2: // count stop
				break;
			case 3:
				t++;
 26c:	ef ef       	ldi	r30, 0xFF	; 255
 26e:	ce 1a       	sub	r12, r30
 270:	de 0a       	sbc	r13, r30
 272:	ee 0a       	sbc	r14, r30
 274:	fe 0a       	sbc	r15, r30
				break;
 276:	21 c0       	rjmp	.+66     	; 0x2ba <main+0xce>
			case 4:
			//LED
			PORTA = 0x0f;
 278:	8f e0       	ldi	r24, 0x0F	; 15
 27a:	8b bb       	out	0x1b, r24	; 27
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 27c:	ef e5       	ldi	r30, 0x5F	; 95
 27e:	fa ee       	ldi	r31, 0xEA	; 234
 280:	31 97       	sbiw	r30, 0x01	; 1
 282:	f1 f7       	brne	.-4      	; 0x280 <main+0x94>
 284:	00 c0       	rjmp	.+0      	; 0x286 <main+0x9a>
 286:	00 00       	nop
			_delay_ms(15);
			PORTA = 0x00;
 288:	1b ba       	out	0x1b, r1	; 27
 28a:	ef e5       	ldi	r30, 0x5F	; 95
 28c:	fa ee       	ldi	r31, 0xEA	; 234
 28e:	31 97       	sbiw	r30, 0x01	; 1
 290:	f1 f7       	brne	.-4      	; 0x28e <main+0xa2>
 292:	00 c0       	rjmp	.+0      	; 0x294 <main+0xa8>
 294:	00 00       	nop
			_delay_ms(15);
			PORTA = 0x0f;
 296:	8b bb       	out	0x1b, r24	; 27
 298:	8f e5       	ldi	r24, 0x5F	; 95
 29a:	9a ee       	ldi	r25, 0xEA	; 234
 29c:	01 97       	sbiw	r24, 0x01	; 1
 29e:	f1 f7       	brne	.-4      	; 0x29c <main+0xb0>
 2a0:	00 c0       	rjmp	.+0      	; 0x2a2 <main+0xb6>
 2a2:	00 00       	nop
			_delay_ms(15);
			PORTA = 0x00;
 2a4:	1b ba       	out	0x1b, r1	; 27
 2a6:	ef e5       	ldi	r30, 0x5F	; 95
 2a8:	fa ee       	ldi	r31, 0xEA	; 234
 2aa:	31 97       	sbiw	r30, 0x01	; 1
 2ac:	f1 f7       	brne	.-4      	; 0x2aa <main+0xbe>
 2ae:	00 c0       	rjmp	.+0      	; 0x2b0 <main+0xc4>
 2b0:	00 00       	nop
 2b2:	03 c0       	rjmp	.+6      	; 0x2ba <main+0xce>
		//PORTE &= 0xf0;
		
		switch(opmode)
		{
			case 0: // reset
				t=0; 
 2b4:	c1 2c       	mov	r12, r1
 2b6:	d1 2c       	mov	r13, r1
 2b8:	76 01       	movw	r14, r12
			break;
			default:
				break;
		}
		//Disp(65535);
		Disp(t);
 2ba:	c7 01       	movw	r24, r14
 2bc:	b6 01       	movw	r22, r12
 2be:	31 df       	rcall	.-414    	; 0x122 <Disp>
		
		//Disp(t++);
		// LED방향, 
    }
 2c0:	a8 cf       	rjmp	.-176    	; 0x212 <main+0x26>

000002c2 <__vector_5>:
}

ISR(INT4_vect)
{
 2c2:	1f 92       	push	r1
 2c4:	0f 92       	push	r0
 2c6:	0f b6       	in	r0, 0x3f	; 63
 2c8:	0f 92       	push	r0
 2ca:	11 24       	eor	r1, r1
 2cc:	8f 93       	push	r24
 2ce:	9f 93       	push	r25
	opmode++;//
 2d0:	80 91 14 01 	lds	r24, 0x0114	; 0x800114 <opmode>
 2d4:	90 91 15 01 	lds	r25, 0x0115	; 0x800115 <opmode+0x1>
 2d8:	01 96       	adiw	r24, 0x01	; 1
 2da:	90 93 15 01 	sts	0x0115, r25	; 0x800115 <opmode+0x1>
 2de:	80 93 14 01 	sts	0x0114, r24	; 0x800114 <opmode>
	if(opmode == 5)opmode =0;
 2e2:	80 91 14 01 	lds	r24, 0x0114	; 0x800114 <opmode>
 2e6:	90 91 15 01 	lds	r25, 0x0115	; 0x800115 <opmode+0x1>
 2ea:	05 97       	sbiw	r24, 0x05	; 5
 2ec:	21 f4       	brne	.+8      	; 0x2f6 <__vector_5+0x34>
 2ee:	10 92 15 01 	sts	0x0115, r1	; 0x800115 <opmode+0x1>
 2f2:	10 92 14 01 	sts	0x0114, r1	; 0x800114 <opmode>
	if(opmode>=OPMODE_MAX)opmode = 1; //1,2
 2f6:	80 91 14 01 	lds	r24, 0x0114	; 0x800114 <opmode>
 2fa:	90 91 15 01 	lds	r25, 0x0115	; 0x800115 <opmode+0x1>
 2fe:	03 97       	sbiw	r24, 0x03	; 3
 300:	34 f0       	brlt	.+12     	; 0x30e <__vector_5+0x4c>
 302:	81 e0       	ldi	r24, 0x01	; 1
 304:	90 e0       	ldi	r25, 0x00	; 0
 306:	90 93 15 01 	sts	0x0115, r25	; 0x800115 <opmode+0x1>
 30a:	80 93 14 01 	sts	0x0114, r24	; 0x800114 <opmode>
	
}
 30e:	9f 91       	pop	r25
 310:	8f 91       	pop	r24
 312:	0f 90       	pop	r0
 314:	0f be       	out	0x3f, r0	; 63
 316:	0f 90       	pop	r0
 318:	1f 90       	pop	r1
 31a:	18 95       	reti

0000031c <__vector_6>:
ISR(INT5_vect)
{
 31c:	1f 92       	push	r1
 31e:	0f 92       	push	r0
 320:	0f b6       	in	r0, 0x3f	; 63
 322:	0f 92       	push	r0
 324:	11 24       	eor	r1, r1
 326:	8f 93       	push	r24
 328:	9f 93       	push	r25
	//PORTD = digit[0];
	//PORTE = 0x0c0;
	state++;
 32a:	80 91 12 01 	lds	r24, 0x0112	; 0x800112 <__data_end>
 32e:	90 91 13 01 	lds	r25, 0x0113	; 0x800113 <__data_end+0x1>
 332:	01 96       	adiw	r24, 0x01	; 1
 334:	90 93 13 01 	sts	0x0113, r25	; 0x800113 <__data_end+0x1>
 338:	80 93 12 01 	sts	0x0112, r24	; 0x800112 <__data_end>
	if(state >= 2) state = 0;
 33c:	80 91 12 01 	lds	r24, 0x0112	; 0x800112 <__data_end>
 340:	90 91 13 01 	lds	r25, 0x0113	; 0x800113 <__data_end+0x1>
 344:	02 97       	sbiw	r24, 0x02	; 2
 346:	24 f0       	brlt	.+8      	; 0x350 <__vector_6+0x34>
 348:	10 92 13 01 	sts	0x0113, r1	; 0x800113 <__data_end+0x1>
 34c:	10 92 12 01 	sts	0x0112, r1	; 0x800112 <__data_end>
	opmode = state+2;
 350:	80 91 12 01 	lds	r24, 0x0112	; 0x800112 <__data_end>
 354:	90 91 13 01 	lds	r25, 0x0113	; 0x800113 <__data_end+0x1>
 358:	02 96       	adiw	r24, 0x02	; 2
 35a:	90 93 15 01 	sts	0x0115, r25	; 0x800115 <opmode+0x1>
 35e:	80 93 14 01 	sts	0x0114, r24	; 0x800114 <opmode>
	//opmode++;//
	//if(opmode>=4)opmode = 2;
}
 362:	9f 91       	pop	r25
 364:	8f 91       	pop	r24
 366:	0f 90       	pop	r0
 368:	0f be       	out	0x3f, r0	; 63
 36a:	0f 90       	pop	r0
 36c:	1f 90       	pop	r1
 36e:	18 95       	reti

00000370 <__vector_7>:
ISR(INT6_vect)
{
 370:	1f 92       	push	r1
 372:	0f 92       	push	r0
 374:	0f b6       	in	r0, 0x3f	; 63
 376:	0f 92       	push	r0
 378:	11 24       	eor	r1, r1
	opmode = 0;
 37a:	10 92 15 01 	sts	0x0115, r1	; 0x800115 <opmode+0x1>
 37e:	10 92 14 01 	sts	0x0114, r1	; 0x800114 <opmode>
 382:	0f 90       	pop	r0
 384:	0f be       	out	0x3f, r0	; 63
 386:	0f 90       	pop	r0
 388:	1f 90       	pop	r1
 38a:	18 95       	reti

0000038c <_exit>:
 38c:	f8 94       	cli

0000038e <__stop_program>:
 38e:	ff cf       	rjmp	.-2      	; 0x38e <__stop_program>
