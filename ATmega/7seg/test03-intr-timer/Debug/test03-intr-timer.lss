
test03-intr-timer.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000012  00800100  00000448  000004dc  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000448  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000009  00800112  00800112  000004ee  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  000004ee  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00000520  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000058  00000000  00000000  0000055c  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00000b93  00000000  00000000  000005b4  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 000008fe  00000000  00000000  00001147  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   000004d4  00000000  00000000  00001a45  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  0000012c  00000000  00000000  00001f1c  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    0000045f  00000000  00000000  00002048  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000004fb  00000000  00000000  000024a7  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000048  00000000  00000000  000029a2  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	45 c0       	rjmp	.+138    	; 0x8c <__ctors_end>
   2:	00 00       	nop
   4:	60 c0       	rjmp	.+192    	; 0xc6 <__bad_interrupt>
   6:	00 00       	nop
   8:	5e c0       	rjmp	.+188    	; 0xc6 <__bad_interrupt>
   a:	00 00       	nop
   c:	5c c0       	rjmp	.+184    	; 0xc6 <__bad_interrupt>
   e:	00 00       	nop
  10:	5a c0       	rjmp	.+180    	; 0xc6 <__bad_interrupt>
  12:	00 00       	nop
  14:	90 c1       	rjmp	.+800    	; 0x336 <__vector_5>
  16:	00 00       	nop
  18:	bb c1       	rjmp	.+886    	; 0x390 <__vector_6>
  1a:	00 00       	nop
  1c:	e3 c1       	rjmp	.+966    	; 0x3e4 <__vector_7>
  1e:	00 00       	nop
  20:	52 c0       	rjmp	.+164    	; 0xc6 <__bad_interrupt>
  22:	00 00       	nop
  24:	50 c0       	rjmp	.+160    	; 0xc6 <__bad_interrupt>
  26:	00 00       	nop
  28:	4e c0       	rjmp	.+156    	; 0xc6 <__bad_interrupt>
  2a:	00 00       	nop
  2c:	4c c0       	rjmp	.+152    	; 0xc6 <__bad_interrupt>
  2e:	00 00       	nop
  30:	4a c0       	rjmp	.+148    	; 0xc6 <__bad_interrupt>
  32:	00 00       	nop
  34:	48 c0       	rjmp	.+144    	; 0xc6 <__bad_interrupt>
  36:	00 00       	nop
  38:	46 c0       	rjmp	.+140    	; 0xc6 <__bad_interrupt>
  3a:	00 00       	nop
  3c:	44 c0       	rjmp	.+136    	; 0xc6 <__bad_interrupt>
  3e:	00 00       	nop
  40:	42 c0       	rjmp	.+132    	; 0xc6 <__bad_interrupt>
  42:	00 00       	nop
  44:	40 c0       	rjmp	.+128    	; 0xc6 <__bad_interrupt>
  46:	00 00       	nop
  48:	3e c0       	rjmp	.+124    	; 0xc6 <__bad_interrupt>
  4a:	00 00       	nop
  4c:	3c c0       	rjmp	.+120    	; 0xc6 <__bad_interrupt>
  4e:	00 00       	nop
  50:	3a c0       	rjmp	.+116    	; 0xc6 <__bad_interrupt>
  52:	00 00       	nop
  54:	38 c0       	rjmp	.+112    	; 0xc6 <__bad_interrupt>
  56:	00 00       	nop
  58:	36 c0       	rjmp	.+108    	; 0xc6 <__bad_interrupt>
  5a:	00 00       	nop
  5c:	34 c0       	rjmp	.+104    	; 0xc6 <__bad_interrupt>
  5e:	00 00       	nop
  60:	32 c0       	rjmp	.+100    	; 0xc6 <__bad_interrupt>
  62:	00 00       	nop
  64:	30 c0       	rjmp	.+96     	; 0xc6 <__bad_interrupt>
  66:	00 00       	nop
  68:	2e c0       	rjmp	.+92     	; 0xc6 <__bad_interrupt>
  6a:	00 00       	nop
  6c:	2c c0       	rjmp	.+88     	; 0xc6 <__bad_interrupt>
  6e:	00 00       	nop
  70:	2a c0       	rjmp	.+84     	; 0xc6 <__bad_interrupt>
  72:	00 00       	nop
  74:	28 c0       	rjmp	.+80     	; 0xc6 <__bad_interrupt>
  76:	00 00       	nop
  78:	26 c0       	rjmp	.+76     	; 0xc6 <__bad_interrupt>
  7a:	00 00       	nop
  7c:	24 c0       	rjmp	.+72     	; 0xc6 <__bad_interrupt>
  7e:	00 00       	nop
  80:	22 c0       	rjmp	.+68     	; 0xc6 <__bad_interrupt>
  82:	00 00       	nop
  84:	20 c0       	rjmp	.+64     	; 0xc6 <__bad_interrupt>
  86:	00 00       	nop
  88:	1e c0       	rjmp	.+60     	; 0xc6 <__bad_interrupt>
	...

0000008c <__ctors_end>:
  8c:	11 24       	eor	r1, r1
  8e:	1f be       	out	0x3f, r1	; 63
  90:	cf ef       	ldi	r28, 0xFF	; 255
  92:	d0 e1       	ldi	r29, 0x10	; 16
  94:	de bf       	out	0x3e, r29	; 62
  96:	cd bf       	out	0x3d, r28	; 61

00000098 <__do_copy_data>:
  98:	11 e0       	ldi	r17, 0x01	; 1
  9a:	a0 e0       	ldi	r26, 0x00	; 0
  9c:	b1 e0       	ldi	r27, 0x01	; 1
  9e:	e8 e4       	ldi	r30, 0x48	; 72
  a0:	f4 e0       	ldi	r31, 0x04	; 4
  a2:	00 e0       	ldi	r16, 0x00	; 0
  a4:	0b bf       	out	0x3b, r16	; 59
  a6:	02 c0       	rjmp	.+4      	; 0xac <__do_copy_data+0x14>
  a8:	07 90       	elpm	r0, Z+
  aa:	0d 92       	st	X+, r0
  ac:	a2 31       	cpi	r26, 0x12	; 18
  ae:	b1 07       	cpc	r27, r17
  b0:	d9 f7       	brne	.-10     	; 0xa8 <__do_copy_data+0x10>

000000b2 <__do_clear_bss>:
  b2:	21 e0       	ldi	r18, 0x01	; 1
  b4:	a2 e1       	ldi	r26, 0x12	; 18
  b6:	b1 e0       	ldi	r27, 0x01	; 1
  b8:	01 c0       	rjmp	.+2      	; 0xbc <.do_clear_bss_start>

000000ba <.do_clear_bss_loop>:
  ba:	1d 92       	st	X+, r1

000000bc <.do_clear_bss_start>:
  bc:	ab 31       	cpi	r26, 0x1B	; 27
  be:	b2 07       	cpc	r27, r18
  c0:	e1 f7       	brne	.-8      	; 0xba <.do_clear_bss_loop>
  c2:	b6 d0       	rcall	.+364    	; 0x230 <main>
  c4:	bf c1       	rjmp	.+894    	; 0x444 <_exit>

000000c6 <__bad_interrupt>:
  c6:	9c cf       	rjmp	.-200    	; 0x0 <__vectors>

000000c8 <seg>:
void reset()
{
	int i = 0;
	PORTE = 0x00;
	//PORTE &= ~(1<<i);
	PORTD = digit[16];
  c8:	93 b1       	in	r25, 0x03	; 3
  ca:	9f 60       	ori	r25, 0x0F	; 15
  cc:	93 b9       	out	0x03, r25	; 3
  ce:	93 b1       	in	r25, 0x03	; 3
  d0:	21 e0       	ldi	r18, 0x01	; 1
  d2:	30 e0       	ldi	r19, 0x00	; 0
  d4:	02 c0       	rjmp	.+4      	; 0xda <seg+0x12>
  d6:	22 0f       	add	r18, r18
  d8:	33 1f       	adc	r19, r19
  da:	8a 95       	dec	r24
  dc:	e2 f7       	brpl	.-8      	; 0xd6 <seg+0xe>
  de:	20 95       	com	r18
  e0:	29 23       	and	r18, r25
  e2:	23 b9       	out	0x03, r18	; 3
  e4:	62 bb       	out	0x12, r22	; 18
  e6:	8f e1       	ldi	r24, 0x1F	; 31
  e8:	9e e4       	ldi	r25, 0x4E	; 78
  ea:	01 97       	sbiw	r24, 0x01	; 1
  ec:	f1 f7       	brne	.-4      	; 0xea <seg+0x22>
  ee:	00 c0       	rjmp	.+0      	; 0xf0 <seg+0x28>
  f0:	00 00       	nop
  f2:	08 95       	ret

000000f4 <FND_4>:
  f4:	0f 93       	push	r16
  f6:	1f 93       	push	r17
  f8:	cf 93       	push	r28
  fa:	df 93       	push	r29
  fc:	8c 01       	movw	r16, r24
  fe:	c0 e0       	ldi	r28, 0x00	; 0
 100:	d0 e0       	ldi	r29, 0x00	; 0
 102:	07 c0       	rjmp	.+14     	; 0x112 <FND_4+0x1e>
 104:	f8 01       	movw	r30, r16
 106:	ec 0f       	add	r30, r28
 108:	fd 1f       	adc	r31, r29
 10a:	60 81       	ld	r22, Z
 10c:	ce 01       	movw	r24, r28
 10e:	dc df       	rcall	.-72     	; 0xc8 <seg>
 110:	21 96       	adiw	r28, 0x01	; 1
 112:	c4 30       	cpi	r28, 0x04	; 4
 114:	d1 05       	cpc	r29, r1
 116:	b4 f3       	brlt	.-20     	; 0x104 <FND_4+0x10>
 118:	df 91       	pop	r29
 11a:	cf 91       	pop	r28
 11c:	1f 91       	pop	r17
 11e:	0f 91       	pop	r16
 120:	08 95       	ret

00000122 <Disp>:
 122:	4f 92       	push	r4
 124:	5f 92       	push	r5
 126:	6f 92       	push	r6
 128:	7f 92       	push	r7
 12a:	8f 92       	push	r8
 12c:	9f 92       	push	r9
 12e:	af 92       	push	r10
 130:	bf 92       	push	r11
 132:	cf 92       	push	r12
 134:	df 92       	push	r13
 136:	ef 92       	push	r14
 138:	ff 92       	push	r15
 13a:	0f 93       	push	r16
 13c:	1f 93       	push	r17
 13e:	cf 93       	push	r28
 140:	df 93       	push	r29
 142:	6b 01       	movw	r12, r22
 144:	7c 01       	movw	r14, r24
 146:	0f 2e       	mov	r0, r31
 148:	fa e0       	ldi	r31, 0x0A	; 10
 14a:	4f 2e       	mov	r4, r31
 14c:	51 2c       	mov	r5, r1
 14e:	61 2c       	mov	r6, r1
 150:	71 2c       	mov	r7, r1
 152:	f0 2d       	mov	r31, r0
 154:	a3 01       	movw	r20, r6
 156:	92 01       	movw	r18, r4
 158:	53 d1       	rcall	.+678    	; 0x400 <__udivmodsi4>
 15a:	4b 01       	movw	r8, r22
 15c:	5c 01       	movw	r10, r24
 15e:	ca 01       	movw	r24, r20
 160:	b9 01       	movw	r22, r18
 162:	a3 01       	movw	r20, r6
 164:	92 01       	movw	r18, r4
 166:	4c d1       	rcall	.+664    	; 0x400 <__udivmodsi4>
 168:	8b 01       	movw	r16, r22
 16a:	c7 01       	movw	r24, r14
 16c:	b6 01       	movw	r22, r12
 16e:	24 e6       	ldi	r18, 0x64	; 100
 170:	30 e0       	ldi	r19, 0x00	; 0
 172:	40 e0       	ldi	r20, 0x00	; 0
 174:	50 e0       	ldi	r21, 0x00	; 0
 176:	44 d1       	rcall	.+648    	; 0x400 <__udivmodsi4>
 178:	ca 01       	movw	r24, r20
 17a:	b9 01       	movw	r22, r18
 17c:	a3 01       	movw	r20, r6
 17e:	92 01       	movw	r18, r4
 180:	3f d1       	rcall	.+638    	; 0x400 <__udivmodsi4>
 182:	eb 01       	movw	r28, r22
 184:	c7 01       	movw	r24, r14
 186:	b6 01       	movw	r22, r12
 188:	28 ee       	ldi	r18, 0xE8	; 232
 18a:	33 e0       	ldi	r19, 0x03	; 3
 18c:	40 e0       	ldi	r20, 0x00	; 0
 18e:	50 e0       	ldi	r21, 0x00	; 0
 190:	37 d1       	rcall	.+622    	; 0x400 <__udivmodsi4>
 192:	88 ee       	ldi	r24, 0xE8	; 232
 194:	c8 16       	cp	r12, r24
 196:	83 e0       	ldi	r24, 0x03	; 3
 198:	d8 06       	cpc	r13, r24
 19a:	e1 04       	cpc	r14, r1
 19c:	f1 04       	cpc	r15, r1
 19e:	d0 f4       	brcc	.+52     	; 0x1d4 <Disp+0xb2>
 1a0:	84 e6       	ldi	r24, 0x64	; 100
 1a2:	c8 16       	cp	r12, r24
 1a4:	d1 04       	cpc	r13, r1
 1a6:	e1 04       	cpc	r14, r1
 1a8:	f1 04       	cpc	r15, r1
 1aa:	58 f4       	brcc	.+22     	; 0x1c2 <Disp+0xa0>
 1ac:	8a e0       	ldi	r24, 0x0A	; 10
 1ae:	c8 16       	cp	r12, r24
 1b0:	d1 04       	cpc	r13, r1
 1b2:	e1 04       	cpc	r14, r1
 1b4:	f1 04       	cpc	r15, r1
 1b6:	40 f0       	brcs	.+16     	; 0x1c8 <Disp+0xa6>
 1b8:	21 e1       	ldi	r18, 0x11	; 17
 1ba:	30 e0       	ldi	r19, 0x00	; 0
 1bc:	c1 e1       	ldi	r28, 0x11	; 17
 1be:	d0 e0       	ldi	r29, 0x00	; 0
 1c0:	09 c0       	rjmp	.+18     	; 0x1d4 <Disp+0xb2>
 1c2:	21 e1       	ldi	r18, 0x11	; 17
 1c4:	30 e0       	ldi	r19, 0x00	; 0
 1c6:	06 c0       	rjmp	.+12     	; 0x1d4 <Disp+0xb2>
 1c8:	21 e1       	ldi	r18, 0x11	; 17
 1ca:	30 e0       	ldi	r19, 0x00	; 0
 1cc:	c1 e1       	ldi	r28, 0x11	; 17
 1ce:	d0 e0       	ldi	r29, 0x00	; 0
 1d0:	01 e1       	ldi	r16, 0x11	; 17
 1d2:	10 e0       	ldi	r17, 0x00	; 0
 1d4:	f4 01       	movw	r30, r8
 1d6:	e0 50       	subi	r30, 0x00	; 0
 1d8:	ff 4f       	sbci	r31, 0xFF	; 255
 1da:	80 81       	ld	r24, Z
 1dc:	e6 e1       	ldi	r30, 0x16	; 22
 1de:	f1 e0       	ldi	r31, 0x01	; 1
 1e0:	80 83       	st	Z, r24
 1e2:	d8 01       	movw	r26, r16
 1e4:	a0 50       	subi	r26, 0x00	; 0
 1e6:	bf 4f       	sbci	r27, 0xFF	; 255
 1e8:	8c 91       	ld	r24, X
 1ea:	81 83       	std	Z+1, r24	; 0x01
 1ec:	c0 50       	subi	r28, 0x00	; 0
 1ee:	df 4f       	sbci	r29, 0xFF	; 255
 1f0:	88 81       	ld	r24, Y
 1f2:	82 83       	std	Z+2, r24	; 0x02
 1f4:	d9 01       	movw	r26, r18
 1f6:	a0 50       	subi	r26, 0x00	; 0
 1f8:	bf 4f       	sbci	r27, 0xFF	; 255
 1fa:	8c 91       	ld	r24, X
 1fc:	83 83       	std	Z+3, r24	; 0x03
 1fe:	80 91 14 01 	lds	r24, 0x0114	; 0x800114 <opmode>
 202:	90 91 15 01 	lds	r25, 0x0115	; 0x800115 <opmode+0x1>
 206:	04 97       	sbiw	r24, 0x04	; 4
 208:	11 f0       	breq	.+4      	; 0x20e <Disp+0xec>
 20a:	cf 01       	movw	r24, r30
 20c:	73 df       	rcall	.-282    	; 0xf4 <FND_4>
 20e:	df 91       	pop	r29
 210:	cf 91       	pop	r28
 212:	1f 91       	pop	r17
 214:	0f 91       	pop	r16
 216:	ff 90       	pop	r15
 218:	ef 90       	pop	r14
 21a:	df 90       	pop	r13
 21c:	cf 90       	pop	r12
 21e:	bf 90       	pop	r11
 220:	af 90       	pop	r10
 222:	9f 90       	pop	r9
 224:	8f 90       	pop	r8
 226:	7f 90       	pop	r7
 228:	6f 90       	pop	r6
 22a:	5f 90       	pop	r5
 22c:	4f 90       	pop	r4
 22e:	08 95       	ret

00000230 <main>:
int main(void)
{
	
	// 7-Segment 사용 : 4 Module - C type
	// Pin assign : PDx - Segment img, PD0~3 - module select
	DDRD = 0xff;
 230:	8f ef       	ldi	r24, 0xFF	; 255
 232:	81 bb       	out	0x11, r24	; 17
	DDRE |= 0x0f;
 234:	82 b1       	in	r24, 0x02	; 2
 236:	8f 60       	ori	r24, 0x0F	; 15
 238:	82 b9       	out	0x02, r24	; 2
	DDRA |= 0x0f;
 23a:	8a b3       	in	r24, 0x1a	; 26
 23c:	8f 60       	ori	r24, 0x0F	; 15
 23e:	8a bb       	out	0x1a, r24	; 26
	// Interrupt 사용 : INT4 ~ INT6 (Ext Int)
	// Pin assign : PE4 ~ PE6
	// 인터럽트 설정
    EIMSK = 0x70;// 0111 0000b
 240:	80 e7       	ldi	r24, 0x70	; 112
 242:	89 bf       	out	0x39, r24	; 57
	EICRB = 0b00101010;
 244:	8a e2       	ldi	r24, 0x2A	; 42
 246:	8a bf       	out	0x3a, r24	; 58
	SREG |= 0x80;//status Register - 인터럽트 허용
 248:	8f b7       	in	r24, 0x3f	; 63
 24a:	80 68       	ori	r24, 0x80	; 128
 24c:	8f bf       	out	0x3f, r24	; 63
	sei();// set interrupt - 인터럽트 시작
 24e:	78 94       	sei
	
	unsigned long t= 0;
 250:	c1 2c       	mov	r12, r1
 252:	d1 2c       	mov	r13, r1
 254:	76 01       	movw	r14, r12
    while (1) 
    {
		//PORTD = digit[0];
		//PORTE &= 0xf0;
		
		switch(opmode)
 256:	80 91 14 01 	lds	r24, 0x0114	; 0x800114 <opmode>
 25a:	90 91 15 01 	lds	r25, 0x0115	; 0x800115 <opmode+0x1>
 25e:	81 30       	cpi	r24, 0x01	; 1
 260:	91 05       	cpc	r25, r1
 262:	59 f0       	breq	.+22     	; 0x27a <main+0x4a>
 264:	24 f4       	brge	.+8      	; 0x26e <main+0x3e>
 266:	89 2b       	or	r24, r25
 268:	09 f4       	brne	.+2      	; 0x26c <main+0x3c>
 26a:	5e c0       	rjmp	.+188    	; 0x328 <main+0xf8>
 26c:	60 c0       	rjmp	.+192    	; 0x32e <main+0xfe>
 26e:	83 30       	cpi	r24, 0x03	; 3
 270:	91 05       	cpc	r25, r1
 272:	f9 f0       	breq	.+62     	; 0x2b2 <main+0x82>
 274:	04 97       	sbiw	r24, 0x04	; 4
 276:	71 f1       	breq	.+92     	; 0x2d4 <main+0xa4>
 278:	5a c0       	rjmp	.+180    	; 0x32e <main+0xfe>
			case 0: // reset
				t=0; 
				break;
			case 1: // counter start
				
				t--;
 27a:	21 e0       	ldi	r18, 0x01	; 1
 27c:	c2 1a       	sub	r12, r18
 27e:	d1 08       	sbc	r13, r1
 280:	e1 08       	sbc	r14, r1
 282:	f1 08       	sbc	r15, r1
				if (t==-1) opmode = 0;
 284:	3f ef       	ldi	r19, 0xFF	; 255
 286:	c3 16       	cp	r12, r19
 288:	d3 06       	cpc	r13, r19
 28a:	e3 06       	cpc	r14, r19
 28c:	f3 06       	cpc	r15, r19
 28e:	21 f4       	brne	.+8      	; 0x298 <main+0x68>
 290:	10 92 15 01 	sts	0x0115, r1	; 0x800115 <opmode+0x1>
 294:	10 92 14 01 	sts	0x0114, r1	; 0x800114 <opmode>
				if(t == 0) opmode=4;
 298:	c1 14       	cp	r12, r1
 29a:	d1 04       	cpc	r13, r1
 29c:	e1 04       	cpc	r14, r1
 29e:	f1 04       	cpc	r15, r1
 2a0:	09 f0       	breq	.+2      	; 0x2a4 <main+0x74>
 2a2:	45 c0       	rjmp	.+138    	; 0x32e <main+0xfe>
 2a4:	84 e0       	ldi	r24, 0x04	; 4
 2a6:	90 e0       	ldi	r25, 0x00	; 0
 2a8:	90 93 15 01 	sts	0x0115, r25	; 0x800115 <opmode+0x1>
 2ac:	80 93 14 01 	sts	0x0114, r24	; 0x800114 <opmode>
 2b0:	3e c0       	rjmp	.+124    	; 0x32e <main+0xfe>
				break;
			case 2: // count stop
				break;
			case 3:
				t++;
 2b2:	8f ef       	ldi	r24, 0xFF	; 255
 2b4:	c8 1a       	sub	r12, r24
 2b6:	d8 0a       	sbc	r13, r24
 2b8:	e8 0a       	sbc	r14, r24
 2ba:	f8 0a       	sbc	r15, r24
				if(t>=10000)opmode = 0;
 2bc:	90 e1       	ldi	r25, 0x10	; 16
 2be:	c9 16       	cp	r12, r25
 2c0:	97 e2       	ldi	r25, 0x27	; 39
 2c2:	d9 06       	cpc	r13, r25
 2c4:	e1 04       	cpc	r14, r1
 2c6:	f1 04       	cpc	r15, r1
 2c8:	90 f1       	brcs	.+100    	; 0x32e <main+0xfe>
 2ca:	10 92 15 01 	sts	0x0115, r1	; 0x800115 <opmode+0x1>
 2ce:	10 92 14 01 	sts	0x0114, r1	; 0x800114 <opmode>
 2d2:	2d c0       	rjmp	.+90     	; 0x32e <main+0xfe>
				break;
			case 4:
			//LED
			PORTA = 0x0f;
 2d4:	8f e0       	ldi	r24, 0x0F	; 15
 2d6:	8b bb       	out	0x1b, r24	; 27
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 2d8:	2f ef       	ldi	r18, 0xFF	; 255
 2da:	30 e7       	ldi	r19, 0x70	; 112
 2dc:	92 e0       	ldi	r25, 0x02	; 2
 2de:	21 50       	subi	r18, 0x01	; 1
 2e0:	30 40       	sbci	r19, 0x00	; 0
 2e2:	90 40       	sbci	r25, 0x00	; 0
 2e4:	e1 f7       	brne	.-8      	; 0x2de <main+0xae>
 2e6:	00 c0       	rjmp	.+0      	; 0x2e8 <main+0xb8>
 2e8:	00 00       	nop
			_delay_ms(50);
			PORTA = 0x00;
 2ea:	1b ba       	out	0x1b, r1	; 27
 2ec:	2f ef       	ldi	r18, 0xFF	; 255
 2ee:	30 e7       	ldi	r19, 0x70	; 112
 2f0:	92 e0       	ldi	r25, 0x02	; 2
 2f2:	21 50       	subi	r18, 0x01	; 1
 2f4:	30 40       	sbci	r19, 0x00	; 0
 2f6:	90 40       	sbci	r25, 0x00	; 0
 2f8:	e1 f7       	brne	.-8      	; 0x2f2 <main+0xc2>
 2fa:	00 c0       	rjmp	.+0      	; 0x2fc <main+0xcc>
 2fc:	00 00       	nop
			_delay_ms(50);
			PORTA = 0x0f;
 2fe:	8b bb       	out	0x1b, r24	; 27
 300:	2f ef       	ldi	r18, 0xFF	; 255
 302:	30 e7       	ldi	r19, 0x70	; 112
 304:	82 e0       	ldi	r24, 0x02	; 2
 306:	21 50       	subi	r18, 0x01	; 1
 308:	30 40       	sbci	r19, 0x00	; 0
 30a:	80 40       	sbci	r24, 0x00	; 0
 30c:	e1 f7       	brne	.-8      	; 0x306 <main+0xd6>
 30e:	00 c0       	rjmp	.+0      	; 0x310 <main+0xe0>
 310:	00 00       	nop
			_delay_ms(50);
			PORTA = 0x00;
 312:	1b ba       	out	0x1b, r1	; 27
 314:	9f ef       	ldi	r25, 0xFF	; 255
 316:	20 e7       	ldi	r18, 0x70	; 112
 318:	32 e0       	ldi	r19, 0x02	; 2
 31a:	91 50       	subi	r25, 0x01	; 1
 31c:	20 40       	sbci	r18, 0x00	; 0
 31e:	30 40       	sbci	r19, 0x00	; 0
 320:	e1 f7       	brne	.-8      	; 0x31a <main+0xea>
 322:	00 c0       	rjmp	.+0      	; 0x324 <main+0xf4>
 324:	00 00       	nop
 326:	03 c0       	rjmp	.+6      	; 0x32e <main+0xfe>
		//PORTE &= 0xf0;
		
		switch(opmode)
		{
			case 0: // reset
				t=0; 
 328:	c1 2c       	mov	r12, r1
 32a:	d1 2c       	mov	r13, r1
 32c:	76 01       	movw	r14, r12
			break;
			default:
				break;
		}
		//Disp(65535);
		Disp(t);
 32e:	c7 01       	movw	r24, r14
 330:	b6 01       	movw	r22, r12
 332:	f7 de       	rcall	.-530    	; 0x122 <Disp>
		
		//Disp(t++);
		// LED방향, 
    }
 334:	90 cf       	rjmp	.-224    	; 0x256 <main+0x26>

00000336 <__vector_5>:
}

ISR(INT4_vect)
{
 336:	1f 92       	push	r1
 338:	0f 92       	push	r0
 33a:	0f b6       	in	r0, 0x3f	; 63
 33c:	0f 92       	push	r0
 33e:	11 24       	eor	r1, r1
 340:	8f 93       	push	r24
 342:	9f 93       	push	r25
	opmode++;//
 344:	80 91 14 01 	lds	r24, 0x0114	; 0x800114 <opmode>
 348:	90 91 15 01 	lds	r25, 0x0115	; 0x800115 <opmode+0x1>
 34c:	01 96       	adiw	r24, 0x01	; 1
 34e:	90 93 15 01 	sts	0x0115, r25	; 0x800115 <opmode+0x1>
 352:	80 93 14 01 	sts	0x0114, r24	; 0x800114 <opmode>
	if(opmode == 5)opmode =0;
 356:	80 91 14 01 	lds	r24, 0x0114	; 0x800114 <opmode>
 35a:	90 91 15 01 	lds	r25, 0x0115	; 0x800115 <opmode+0x1>
 35e:	05 97       	sbiw	r24, 0x05	; 5
 360:	21 f4       	brne	.+8      	; 0x36a <__vector_5+0x34>
 362:	10 92 15 01 	sts	0x0115, r1	; 0x800115 <opmode+0x1>
 366:	10 92 14 01 	sts	0x0114, r1	; 0x800114 <opmode>
	if(opmode>=OPMODE_MAX)opmode = 1; //1,2
 36a:	80 91 14 01 	lds	r24, 0x0114	; 0x800114 <opmode>
 36e:	90 91 15 01 	lds	r25, 0x0115	; 0x800115 <opmode+0x1>
 372:	03 97       	sbiw	r24, 0x03	; 3
 374:	34 f0       	brlt	.+12     	; 0x382 <__vector_5+0x4c>
 376:	81 e0       	ldi	r24, 0x01	; 1
 378:	90 e0       	ldi	r25, 0x00	; 0
 37a:	90 93 15 01 	sts	0x0115, r25	; 0x800115 <opmode+0x1>
 37e:	80 93 14 01 	sts	0x0114, r24	; 0x800114 <opmode>
	
}
 382:	9f 91       	pop	r25
 384:	8f 91       	pop	r24
 386:	0f 90       	pop	r0
 388:	0f be       	out	0x3f, r0	; 63
 38a:	0f 90       	pop	r0
 38c:	1f 90       	pop	r1
 38e:	18 95       	reti

00000390 <__vector_6>:
ISR(INT5_vect)
{
 390:	1f 92       	push	r1
 392:	0f 92       	push	r0
 394:	0f b6       	in	r0, 0x3f	; 63
 396:	0f 92       	push	r0
 398:	11 24       	eor	r1, r1
 39a:	8f 93       	push	r24
 39c:	9f 93       	push	r25
	//PORTD = digit[0];
	//PORTE = 0x0c0;
	state++;
 39e:	80 91 12 01 	lds	r24, 0x0112	; 0x800112 <__data_end>
 3a2:	90 91 13 01 	lds	r25, 0x0113	; 0x800113 <__data_end+0x1>
 3a6:	01 96       	adiw	r24, 0x01	; 1
 3a8:	90 93 13 01 	sts	0x0113, r25	; 0x800113 <__data_end+0x1>
 3ac:	80 93 12 01 	sts	0x0112, r24	; 0x800112 <__data_end>
	if(state >= 2) state = 0;
 3b0:	80 91 12 01 	lds	r24, 0x0112	; 0x800112 <__data_end>
 3b4:	90 91 13 01 	lds	r25, 0x0113	; 0x800113 <__data_end+0x1>
 3b8:	02 97       	sbiw	r24, 0x02	; 2
 3ba:	24 f0       	brlt	.+8      	; 0x3c4 <__vector_6+0x34>
 3bc:	10 92 13 01 	sts	0x0113, r1	; 0x800113 <__data_end+0x1>
 3c0:	10 92 12 01 	sts	0x0112, r1	; 0x800112 <__data_end>
	opmode = state+2;
 3c4:	80 91 12 01 	lds	r24, 0x0112	; 0x800112 <__data_end>
 3c8:	90 91 13 01 	lds	r25, 0x0113	; 0x800113 <__data_end+0x1>
 3cc:	02 96       	adiw	r24, 0x02	; 2
 3ce:	90 93 15 01 	sts	0x0115, r25	; 0x800115 <opmode+0x1>
 3d2:	80 93 14 01 	sts	0x0114, r24	; 0x800114 <opmode>
	//opmode++;//
	//if(opmode>=4)opmode = 2;
}
 3d6:	9f 91       	pop	r25
 3d8:	8f 91       	pop	r24
 3da:	0f 90       	pop	r0
 3dc:	0f be       	out	0x3f, r0	; 63
 3de:	0f 90       	pop	r0
 3e0:	1f 90       	pop	r1
 3e2:	18 95       	reti

000003e4 <__vector_7>:
ISR(INT6_vect)
{
 3e4:	1f 92       	push	r1
 3e6:	0f 92       	push	r0
 3e8:	0f b6       	in	r0, 0x3f	; 63
 3ea:	0f 92       	push	r0
 3ec:	11 24       	eor	r1, r1
	opmode = 0;
 3ee:	10 92 15 01 	sts	0x0115, r1	; 0x800115 <opmode+0x1>
 3f2:	10 92 14 01 	sts	0x0114, r1	; 0x800114 <opmode>
 3f6:	0f 90       	pop	r0
 3f8:	0f be       	out	0x3f, r0	; 63
 3fa:	0f 90       	pop	r0
 3fc:	1f 90       	pop	r1
 3fe:	18 95       	reti

00000400 <__udivmodsi4>:
 400:	a1 e2       	ldi	r26, 0x21	; 33
 402:	1a 2e       	mov	r1, r26
 404:	aa 1b       	sub	r26, r26
 406:	bb 1b       	sub	r27, r27
 408:	fd 01       	movw	r30, r26
 40a:	0d c0       	rjmp	.+26     	; 0x426 <__udivmodsi4_ep>

0000040c <__udivmodsi4_loop>:
 40c:	aa 1f       	adc	r26, r26
 40e:	bb 1f       	adc	r27, r27
 410:	ee 1f       	adc	r30, r30
 412:	ff 1f       	adc	r31, r31
 414:	a2 17       	cp	r26, r18
 416:	b3 07       	cpc	r27, r19
 418:	e4 07       	cpc	r30, r20
 41a:	f5 07       	cpc	r31, r21
 41c:	20 f0       	brcs	.+8      	; 0x426 <__udivmodsi4_ep>
 41e:	a2 1b       	sub	r26, r18
 420:	b3 0b       	sbc	r27, r19
 422:	e4 0b       	sbc	r30, r20
 424:	f5 0b       	sbc	r31, r21

00000426 <__udivmodsi4_ep>:
 426:	66 1f       	adc	r22, r22
 428:	77 1f       	adc	r23, r23
 42a:	88 1f       	adc	r24, r24
 42c:	99 1f       	adc	r25, r25
 42e:	1a 94       	dec	r1
 430:	69 f7       	brne	.-38     	; 0x40c <__udivmodsi4_loop>
 432:	60 95       	com	r22
 434:	70 95       	com	r23
 436:	80 95       	com	r24
 438:	90 95       	com	r25
 43a:	9b 01       	movw	r18, r22
 43c:	ac 01       	movw	r20, r24
 43e:	bd 01       	movw	r22, r26
 440:	cf 01       	movw	r24, r30
 442:	08 95       	ret

00000444 <_exit>:
 444:	f8 94       	cli

00000446 <__stop_program>:
 446:	ff cf       	rjmp	.-2      	; 0x446 <__stop_program>
