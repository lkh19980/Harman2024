
7seg-btn-example.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000012  00800100  000002ac  00000340  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000002ac  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000005  00800112  00800112  00000352  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00000352  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00000384  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000048  00000000  00000000  000003c0  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00000baa  00000000  00000000  00000408  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000906  00000000  00000000  00000fb2  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   0000043e  00000000  00000000  000018b8  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000098  00000000  00000000  00001cf8  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000437  00000000  00000000  00001d90  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000004a1  00000000  00000000  000021c7  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000038  00000000  00000000  00002668  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	45 c0       	rjmp	.+138    	; 0x8c <__ctors_end>
   2:	00 00       	nop
   4:	60 c0       	rjmp	.+192    	; 0xc6 <__bad_interrupt>
   6:	00 00       	nop
   8:	5e c0       	rjmp	.+188    	; 0xc6 <__bad_interrupt>
   a:	00 00       	nop
   c:	5c c0       	rjmp	.+184    	; 0xc6 <__bad_interrupt>
   e:	00 00       	nop
  10:	5a c0       	rjmp	.+180    	; 0xc6 <__bad_interrupt>
  12:	00 00       	nop
  14:	58 c0       	rjmp	.+176    	; 0xc6 <__bad_interrupt>
  16:	00 00       	nop
  18:	56 c0       	rjmp	.+172    	; 0xc6 <__bad_interrupt>
  1a:	00 00       	nop
  1c:	54 c0       	rjmp	.+168    	; 0xc6 <__bad_interrupt>
  1e:	00 00       	nop
  20:	52 c0       	rjmp	.+164    	; 0xc6 <__bad_interrupt>
  22:	00 00       	nop
  24:	50 c0       	rjmp	.+160    	; 0xc6 <__bad_interrupt>
  26:	00 00       	nop
  28:	4e c0       	rjmp	.+156    	; 0xc6 <__bad_interrupt>
  2a:	00 00       	nop
  2c:	4c c0       	rjmp	.+152    	; 0xc6 <__bad_interrupt>
  2e:	00 00       	nop
  30:	4a c0       	rjmp	.+148    	; 0xc6 <__bad_interrupt>
  32:	00 00       	nop
  34:	48 c0       	rjmp	.+144    	; 0xc6 <__bad_interrupt>
  36:	00 00       	nop
  38:	46 c0       	rjmp	.+140    	; 0xc6 <__bad_interrupt>
  3a:	00 00       	nop
  3c:	44 c0       	rjmp	.+136    	; 0xc6 <__bad_interrupt>
  3e:	00 00       	nop
  40:	42 c0       	rjmp	.+132    	; 0xc6 <__bad_interrupt>
  42:	00 00       	nop
  44:	40 c0       	rjmp	.+128    	; 0xc6 <__bad_interrupt>
  46:	00 00       	nop
  48:	3e c0       	rjmp	.+124    	; 0xc6 <__bad_interrupt>
  4a:	00 00       	nop
  4c:	3c c0       	rjmp	.+120    	; 0xc6 <__bad_interrupt>
  4e:	00 00       	nop
  50:	3a c0       	rjmp	.+116    	; 0xc6 <__bad_interrupt>
  52:	00 00       	nop
  54:	38 c0       	rjmp	.+112    	; 0xc6 <__bad_interrupt>
  56:	00 00       	nop
  58:	36 c0       	rjmp	.+108    	; 0xc6 <__bad_interrupt>
  5a:	00 00       	nop
  5c:	34 c0       	rjmp	.+104    	; 0xc6 <__bad_interrupt>
  5e:	00 00       	nop
  60:	32 c0       	rjmp	.+100    	; 0xc6 <__bad_interrupt>
  62:	00 00       	nop
  64:	30 c0       	rjmp	.+96     	; 0xc6 <__bad_interrupt>
  66:	00 00       	nop
  68:	2e c0       	rjmp	.+92     	; 0xc6 <__bad_interrupt>
  6a:	00 00       	nop
  6c:	2c c0       	rjmp	.+88     	; 0xc6 <__bad_interrupt>
  6e:	00 00       	nop
  70:	2a c0       	rjmp	.+84     	; 0xc6 <__bad_interrupt>
  72:	00 00       	nop
  74:	28 c0       	rjmp	.+80     	; 0xc6 <__bad_interrupt>
  76:	00 00       	nop
  78:	26 c0       	rjmp	.+76     	; 0xc6 <__bad_interrupt>
  7a:	00 00       	nop
  7c:	24 c0       	rjmp	.+72     	; 0xc6 <__bad_interrupt>
  7e:	00 00       	nop
  80:	22 c0       	rjmp	.+68     	; 0xc6 <__bad_interrupt>
  82:	00 00       	nop
  84:	20 c0       	rjmp	.+64     	; 0xc6 <__bad_interrupt>
  86:	00 00       	nop
  88:	1e c0       	rjmp	.+60     	; 0xc6 <__bad_interrupt>
	...

0000008c <__ctors_end>:
  8c:	11 24       	eor	r1, r1
  8e:	1f be       	out	0x3f, r1	; 63
  90:	cf ef       	ldi	r28, 0xFF	; 255
  92:	d0 e1       	ldi	r29, 0x10	; 16
  94:	de bf       	out	0x3e, r29	; 62
  96:	cd bf       	out	0x3d, r28	; 61

00000098 <__do_copy_data>:
  98:	11 e0       	ldi	r17, 0x01	; 1
  9a:	a0 e0       	ldi	r26, 0x00	; 0
  9c:	b1 e0       	ldi	r27, 0x01	; 1
  9e:	ec ea       	ldi	r30, 0xAC	; 172
  a0:	f2 e0       	ldi	r31, 0x02	; 2
  a2:	00 e0       	ldi	r16, 0x00	; 0
  a4:	0b bf       	out	0x3b, r16	; 59
  a6:	02 c0       	rjmp	.+4      	; 0xac <__do_copy_data+0x14>
  a8:	07 90       	elpm	r0, Z+
  aa:	0d 92       	st	X+, r0
  ac:	a2 31       	cpi	r26, 0x12	; 18
  ae:	b1 07       	cpc	r27, r17
  b0:	d9 f7       	brne	.-10     	; 0xa8 <__do_copy_data+0x10>

000000b2 <__do_clear_bss>:
  b2:	21 e0       	ldi	r18, 0x01	; 1
  b4:	a2 e1       	ldi	r26, 0x12	; 18
  b6:	b1 e0       	ldi	r27, 0x01	; 1
  b8:	01 c0       	rjmp	.+2      	; 0xbc <.do_clear_bss_start>

000000ba <.do_clear_bss_loop>:
  ba:	1d 92       	st	X+, r1

000000bc <.do_clear_bss_start>:
  bc:	a7 31       	cpi	r26, 0x17	; 23
  be:	b2 07       	cpc	r27, r18
  c0:	e1 f7       	brne	.-8      	; 0xba <.do_clear_bss_loop>
  c2:	98 d0       	rcall	.+304    	; 0x1f4 <main>
  c4:	f1 c0       	rjmp	.+482    	; 0x2a8 <_exit>

000000c6 <__bad_interrupt>:
  c6:	9c cf       	rjmp	.-200    	; 0x0 <__vectors>

000000c8 <seg>:
//LED(PORTD,0);

void seg(int sel, uint8_t c)
{
	int i = 0;
	PORTE |= 0x0f;
  c8:	93 b1       	in	r25, 0x03	; 3
  ca:	9f 60       	ori	r25, 0x0F	; 15
  cc:	93 b9       	out	0x03, r25	; 3
	//PORTE &= ~(1<<(3-sel));
	PORTE &= ~(1<<sel);
  ce:	93 b1       	in	r25, 0x03	; 3
  d0:	21 e0       	ldi	r18, 0x01	; 1
  d2:	30 e0       	ldi	r19, 0x00	; 0
  d4:	02 c0       	rjmp	.+4      	; 0xda <seg+0x12>
  d6:	22 0f       	add	r18, r18
  d8:	33 1f       	adc	r19, r19
  da:	8a 95       	dec	r24
  dc:	e2 f7       	brpl	.-8      	; 0xd6 <seg+0xe>
  de:	20 95       	com	r18
  e0:	29 23       	and	r18, r25
  e2:	23 b9       	out	0x03, r18	; 3
	PORTD = c;
  e4:	62 bb       	out	0x12, r22	; 18
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  e6:	8f e1       	ldi	r24, 0x1F	; 31
  e8:	9e e4       	ldi	r25, 0x4E	; 78
  ea:	01 97       	sbiw	r24, 0x01	; 1
  ec:	f1 f7       	brne	.-4      	; 0xea <seg+0x22>
  ee:	00 c0       	rjmp	.+0      	; 0xf0 <seg+0x28>
  f0:	00 00       	nop
  f2:	08 95       	ret

000000f4 <FND_4>:
	//_delay_ms(100);
	
}

void FND_4(char *inf) // segment Image 배열
{
  f4:	0f 93       	push	r16
  f6:	1f 93       	push	r17
  f8:	cf 93       	push	r28
  fa:	df 93       	push	r29
  fc:	8c 01       	movw	r16, r24
	for(int i = 0; i< 4 ; i++)
  fe:	c0 e0       	ldi	r28, 0x00	; 0
 100:	d0 e0       	ldi	r29, 0x00	; 0
 102:	07 c0       	rjmp	.+14     	; 0x112 <FND_4+0x1e>
	{
		seg(i, *(inf+i));
 104:	f8 01       	movw	r30, r16
 106:	ec 0f       	add	r30, r28
 108:	fd 1f       	adc	r31, r29
 10a:	60 81       	ld	r22, Z
 10c:	ce 01       	movw	r24, r28
 10e:	dc df       	rcall	.-72     	; 0xc8 <seg>
	
}

void FND_4(char *inf) // segment Image 배열
{
	for(int i = 0; i< 4 ; i++)
 110:	21 96       	adiw	r28, 0x01	; 1
 112:	c4 30       	cpi	r28, 0x04	; 4
 114:	d1 05       	cpc	r29, r1
 116:	b4 f3       	brlt	.-20     	; 0x104 <FND_4+0x10>
	{
		seg(i, *(inf+i));
	}
	
}
 118:	df 91       	pop	r29
 11a:	cf 91       	pop	r28
 11c:	1f 91       	pop	r17
 11e:	0f 91       	pop	r16
 120:	08 95       	ret

00000122 <Trans>:
//문자열 고려서 안전영역 고려
//정적변수 영역에 부여
char* Trans(unsigned long num)//10진수 정수 ==> 16진수 문자열로 변환 : 65535 ==> 0xFFFF, 56506 ==> 0xDCBA
{								//16비트 세그문트 이미지 배열
 122:	0f 93       	push	r16
 124:	1f 93       	push	r17
 126:	cf 93       	push	r28
	int n1 = num%0x10;			//A 1		:문자가 아닌 숫자
 128:	db 01       	movw	r26, r22
 12a:	af 70       	andi	r26, 0x0F	; 15
 12c:	bb 27       	eor	r27, r27
	int n2 = (num/0x10)%16;		//B 16		:
 12e:	8b 01       	movw	r16, r22
 130:	9c 01       	movw	r18, r24
 132:	68 94       	set
 134:	13 f8       	bld	r1, 3
 136:	36 95       	lsr	r19
 138:	27 95       	ror	r18
 13a:	17 95       	ror	r17
 13c:	07 95       	ror	r16
 13e:	16 94       	lsr	r1
 140:	d1 f7       	brne	.-12     	; 0x136 <Trans+0x14>
 142:	f8 01       	movw	r30, r16
 144:	ef 70       	andi	r30, 0x0F	; 15
 146:	ff 27       	eor	r31, r31
	int n3 = (num/0x100)%16;	//C 256
 148:	07 2f       	mov	r16, r23
 14a:	18 2f       	mov	r17, r24
 14c:	29 2f       	mov	r18, r25
 14e:	33 27       	eor	r19, r19
 150:	a8 01       	movw	r20, r16
 152:	4f 70       	andi	r20, 0x0F	; 15
 154:	55 27       	eor	r21, r21
	int n4 = num/0x1000;		//D 4096	
 156:	8b 01       	movw	r16, r22
 158:	9c 01       	movw	r18, r24
 15a:	0f 2e       	mov	r0, r31
 15c:	fc e0       	ldi	r31, 0x0C	; 12
 15e:	36 95       	lsr	r19
 160:	27 95       	ror	r18
 162:	17 95       	ror	r17
 164:	07 95       	ror	r16
 166:	fa 95       	dec	r31
 168:	d1 f7       	brne	.-12     	; 0x15e <Trans+0x3c>
 16a:	f0 2d       	mov	r31, r0
 16c:	98 01       	movw	r18, r16
	if(!(num/0x1000))
 16e:	61 15       	cp	r22, r1
 170:	c0 e1       	ldi	r28, 0x10	; 16
 172:	7c 07       	cpc	r23, r28
 174:	81 05       	cpc	r24, r1
 176:	91 05       	cpc	r25, r1
 178:	c8 f4       	brcc	.+50     	; 0x1ac <Trans+0x8a>
	{
		n4=17;
		if(!(num/0x100))
 17a:	6f 3f       	cpi	r22, 0xFF	; 255
 17c:	71 05       	cpc	r23, r1
 17e:	81 05       	cpc	r24, r1
 180:	91 05       	cpc	r25, r1
 182:	09 f0       	breq	.+2      	; 0x186 <Trans+0x64>
 184:	50 f4       	brcc	.+20     	; 0x19a <Trans+0x78>
		{
			n3=17;
			if(!(num/0x10))n2=17;
 186:	60 31       	cpi	r22, 0x10	; 16
 188:	71 05       	cpc	r23, r1
 18a:	81 05       	cpc	r24, r1
 18c:	91 05       	cpc	r25, r1
 18e:	40 f0       	brcs	.+16     	; 0x1a0 <Trans+0x7e>
	int n2 = (num/0x10)%16;		//B 16		:
	int n3 = (num/0x100)%16;	//C 256
	int n4 = num/0x1000;		//D 4096	
	if(!(num/0x1000))
	{
		n4=17;
 190:	21 e1       	ldi	r18, 0x11	; 17
 192:	30 e0       	ldi	r19, 0x00	; 0
		if(!(num/0x100))
		{
			n3=17;
 194:	41 e1       	ldi	r20, 0x11	; 17
 196:	50 e0       	ldi	r21, 0x00	; 0
 198:	09 c0       	rjmp	.+18     	; 0x1ac <Trans+0x8a>
	int n2 = (num/0x10)%16;		//B 16		:
	int n3 = (num/0x100)%16;	//C 256
	int n4 = num/0x1000;		//D 4096	
	if(!(num/0x1000))
	{
		n4=17;
 19a:	21 e1       	ldi	r18, 0x11	; 17
 19c:	30 e0       	ldi	r19, 0x00	; 0
 19e:	06 c0       	rjmp	.+12     	; 0x1ac <Trans+0x8a>
 1a0:	21 e1       	ldi	r18, 0x11	; 17
 1a2:	30 e0       	ldi	r19, 0x00	; 0
		if(!(num/0x100))
		{
			n3=17;
 1a4:	41 e1       	ldi	r20, 0x11	; 17
 1a6:	50 e0       	ldi	r21, 0x00	; 0
			if(!(num/0x10))n2=17;
 1a8:	e1 e1       	ldi	r30, 0x11	; 17
 1aa:	f0 e0       	ldi	r31, 0x00	; 0
		}
	}
	arr[0] = digit[n1];//char 1byte cast() LED문자로 표현
 1ac:	a0 50       	subi	r26, 0x00	; 0
 1ae:	bf 4f       	sbci	r27, 0xFF	; 255
 1b0:	8c 91       	ld	r24, X
 1b2:	a2 e1       	ldi	r26, 0x12	; 18
 1b4:	b1 e0       	ldi	r27, 0x01	; 1
 1b6:	8c 93       	st	X, r24
	arr[1] = digit[n2];
 1b8:	e0 50       	subi	r30, 0x00	; 0
 1ba:	ff 4f       	sbci	r31, 0xFF	; 255
 1bc:	80 81       	ld	r24, Z
 1be:	11 96       	adiw	r26, 0x01	; 1
 1c0:	8c 93       	st	X, r24
 1c2:	11 97       	sbiw	r26, 0x01	; 1
	arr[2] = digit[n3];
 1c4:	fa 01       	movw	r30, r20
 1c6:	e0 50       	subi	r30, 0x00	; 0
 1c8:	ff 4f       	sbci	r31, 0xFF	; 255
 1ca:	80 81       	ld	r24, Z
 1cc:	12 96       	adiw	r26, 0x02	; 2
 1ce:	8c 93       	st	X, r24
 1d0:	12 97       	sbiw	r26, 0x02	; 2
	arr[3] = digit[n4];
 1d2:	f9 01       	movw	r30, r18
 1d4:	e0 50       	subi	r30, 0x00	; 0
 1d6:	ff 4f       	sbci	r31, 0xFF	; 255
 1d8:	80 81       	ld	r24, Z
 1da:	13 96       	adiw	r26, 0x03	; 3
 1dc:	8c 93       	st	X, r24
 1de:	13 97       	sbiw	r26, 0x03	; 3
	//* 실수 연산 여러 클럭 사용
	//'/' 연산 여러 클럭 사용
	//FND_4(arr);
	return arr;
	
}
 1e0:	cd 01       	movw	r24, r26
 1e2:	cf 91       	pop	r28
 1e4:	1f 91       	pop	r17
 1e6:	0f 91       	pop	r16
 1e8:	08 95       	ret

000001ea <reset>:

void reset()
{
	int i = 0;
	PORTE = 0x00;
 1ea:	13 b8       	out	0x03, r1	; 3
	//PORTE &= ~(1<<i);
	PORTD = digit[16];
 1ec:	80 91 10 01 	lds	r24, 0x0110	; 0x800110 <__DATA_REGION_ORIGIN__+0x10>
 1f0:	82 bb       	out	0x12, r24	; 18
 1f2:	08 95       	ret

000001f4 <main>:
{
	
	int i=0;
	unsigned long j =0;
    //DDRD = 0x07;
	DDRD = 0xff;
 1f4:	8f ef       	ldi	r24, 0xFF	; 255
 1f6:	81 bb       	out	0x11, r24	; 17
	DDRE = 0x0f;
 1f8:	8f e0       	ldi	r24, 0x0F	; 15
 1fa:	82 b9       	out	0x02, r24	; 2
	
	DDRB &= ~0x01;
 1fc:	87 b3       	in	r24, 0x17	; 23
 1fe:	8e 7f       	andi	r24, 0xFE	; 254
 200:	87 bb       	out	0x17, r24	; 23
	int start = 0;//0 stop 1 start 2 pause
	reset();
 202:	f3 df       	rcall	.-26     	; 0x1ea <reset>
    //DDRD = 0x07;
	DDRD = 0xff;
	DDRE = 0x0f;
	
	DDRB &= ~0x01;
	int start = 0;//0 stop 1 start 2 pause
 204:	c0 e0       	ldi	r28, 0x00	; 0
 206:	d0 e0       	ldi	r29, 0x00	; 0

int main(void)
{
	
	int i=0;
	unsigned long j =0;
 208:	c1 2c       	mov	r12, r1
 20a:	d1 2c       	mov	r13, r1
 20c:	76 01       	movw	r14, r12
 20e:	06 c0       	rjmp	.+12     	; 0x21c <main+0x28>
			case 2:
			FND_4(arr);
			break;
			
			default:
			start = 0;
 210:	c0 e0       	ldi	r28, 0x00	; 0
 212:	d0 e0       	ldi	r29, 0x00	; 0
 214:	03 c0       	rjmp	.+6      	; 0x21c <main+0x28>
			case 1:
			
			FND_4(Trans(j++));
			_delay_ms(1);
			
			if(j>=0x10000)j = 0;
 216:	c1 2c       	mov	r12, r1
 218:	d1 2c       	mov	r13, r1
 21a:	76 01       	movw	r14, r12
	DDRB &= ~0x01;
	int start = 0;//0 stop 1 start 2 pause
	reset();
    while (1) 
    {
		if(!(PINB & 1) )
 21c:	b0 99       	sbic	0x16, 0	; 22
 21e:	1e c0       	rjmp	.+60     	; 0x25c <main+0x68>
 220:	2f ef       	ldi	r18, 0xFF	; 255
 222:	83 ec       	ldi	r24, 0xC3	; 195
 224:	99 e0       	ldi	r25, 0x09	; 9
 226:	21 50       	subi	r18, 0x01	; 1
 228:	80 40       	sbci	r24, 0x00	; 0
 22a:	90 40       	sbci	r25, 0x00	; 0
 22c:	e1 f7       	brne	.-8      	; 0x226 <main+0x32>
 22e:	00 c0       	rjmp	.+0      	; 0x230 <main+0x3c>
 230:	00 00       	nop
		{
			_delay_ms(200);
			switch(start)
 232:	c1 30       	cpi	r28, 0x01	; 1
 234:	d1 05       	cpc	r29, r1
 236:	31 f0       	breq	.+12     	; 0x244 <main+0x50>
 238:	c2 30       	cpi	r28, 0x02	; 2
 23a:	d1 05       	cpc	r29, r1
 23c:	31 f0       	breq	.+12     	; 0x24a <main+0x56>
 23e:	20 97       	sbiw	r28, 0x00	; 0
 240:	69 f4       	brne	.+26     	; 0x25c <main+0x68>
 242:	0a c0       	rjmp	.+20     	; 0x258 <main+0x64>
			{
				case 0:
				start = 1;
				break;
				case 1:
				start = 2;
 244:	c2 e0       	ldi	r28, 0x02	; 2
 246:	d0 e0       	ldi	r29, 0x00	; 0
				break;
				case 2:
				reset();
 248:	09 c0       	rjmp	.+18     	; 0x25c <main+0x68>
 24a:	cf df       	rcall	.-98     	; 0x1ea <reset>
				start = 0;
 24c:	c0 e0       	ldi	r28, 0x00	; 0
 24e:	d0 e0       	ldi	r29, 0x00	; 0
				j = 0;
 250:	c1 2c       	mov	r12, r1
 252:	d1 2c       	mov	r13, r1
 254:	76 01       	movw	r14, r12
				break;
 256:	02 c0       	rjmp	.+4      	; 0x25c <main+0x68>
		{
			_delay_ms(200);
			switch(start)
			{
				case 0:
				start = 1;
 258:	c1 e0       	ldi	r28, 0x01	; 1
 25a:	d0 e0       	ldi	r29, 0x00	; 0
				start = 0;
				j = 0;
				break;
			}
		}
		switch(start)
 25c:	c1 30       	cpi	r28, 0x01	; 1
 25e:	d1 05       	cpc	r29, r1
 260:	21 f0       	breq	.+8      	; 0x26a <main+0x76>
 262:	c2 30       	cpi	r28, 0x02	; 2
 264:	d1 05       	cpc	r29, r1
 266:	e1 f0       	breq	.+56     	; 0x2a0 <main+0xac>
 268:	d3 cf       	rjmp	.-90     	; 0x210 <main+0x1c>
		{
			case 1:
			
			FND_4(Trans(j++));
 26a:	46 01       	movw	r8, r12
 26c:	57 01       	movw	r10, r14
 26e:	2f ef       	ldi	r18, 0xFF	; 255
 270:	82 1a       	sub	r8, r18
 272:	92 0a       	sbc	r9, r18
 274:	a2 0a       	sbc	r10, r18
 276:	b2 0a       	sbc	r11, r18
 278:	c7 01       	movw	r24, r14
 27a:	b6 01       	movw	r22, r12
 27c:	52 df       	rcall	.-348    	; 0x122 <Trans>
 27e:	3a df       	rcall	.-396    	; 0xf4 <FND_4>
 280:	8f e9       	ldi	r24, 0x9F	; 159
 282:	9f e0       	ldi	r25, 0x0F	; 15
 284:	01 97       	sbiw	r24, 0x01	; 1
 286:	f1 f7       	brne	.-4      	; 0x284 <main+0x90>
 288:	00 c0       	rjmp	.+0      	; 0x28a <main+0x96>
 28a:	00 00       	nop
			_delay_ms(1);
			
			if(j>=0x10000)j = 0;
 28c:	81 14       	cp	r8, r1
 28e:	91 04       	cpc	r9, r1
 290:	91 e0       	ldi	r25, 0x01	; 1
 292:	a9 06       	cpc	r10, r25
 294:	b1 04       	cpc	r11, r1
 296:	08 f0       	brcs	.+2      	; 0x29a <main+0xa6>
 298:	be cf       	rjmp	.-132    	; 0x216 <main+0x22>
		}
		switch(start)
		{
			case 1:
			
			FND_4(Trans(j++));
 29a:	75 01       	movw	r14, r10
 29c:	64 01       	movw	r12, r8
			
			if(j>=0x10000)j = 0;
			break;
			
			case 2:
			FND_4(arr);
 29e:	be cf       	rjmp	.-132    	; 0x21c <main+0x28>
 2a0:	82 e1       	ldi	r24, 0x12	; 18
 2a2:	91 e0       	ldi	r25, 0x01	; 1
 2a4:	27 df       	rcall	.-434    	; 0xf4 <FND_4>
			break;
 2a6:	ba cf       	rjmp	.-140    	; 0x21c <main+0x28>

000002a8 <_exit>:
 2a8:	f8 94       	cli

000002aa <__stop_program>:
 2aa:	ff cf       	rjmp	.-2      	; 0x2aa <__stop_program>
